{"version":3,"sources":["domain/actions.ts","reportWebVitals.ts","domain/DateTime.ts","domain/Observable.ts","domain/Robot.ts","domain/RandomGenerator.ts","domain/Store.ts","domain/Game.ts","domain/Strategy.ts","ui/contexts/game.ts","ui/components/Counter/Counter.tsx","ui/components/ProbabilityCommands/SliderCommand.tsx","ui/components/ProbabilityCommands/ProbabilityCommands.tsx","ui/hooks/useGameState.ts","utils.ts","ui/hooks/useRobotsAmountByLocation.ts","ui/components/RobotsLocations/Circles.tsx","ui/components/RobotsLocations/RobotsLocations.tsx","ui/components/Statistics/Statistics.tsx","ui/Foobartory.tsx","index.tsx"],"names":["ActionType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RealDateTime","Date","now","ObservedRobot","MOVING","actionType","totalDuration","MINING_FOO","MINING_BAR","randomBetween","ASSEMBLING","BUYING_ROBOT","WAITING","ASSEMBLING_NEEDED_RESSOURCES","foos","bars","foobars","BUYING_ROBOT_NEEDED_RESSOURCES","Observable","callbacks","Map","information","callback","this","get","push","value","forEach","ObservedAmount","ObservableRobot","set","ROBOT_LOCATION","Location","ObservableStore","FOOS_AMOUNT","BARS_AMOUNT","FOOBARS_AMOUNT","ROBOTS_AMOUNT","RealRandomGenerator","percentage","Error","Math","random","min","max","values","_checkWeights","weightsSum","Array","from","reduce","a","b","chosenValue","entries","next","sum","key","weights","some","x","every","Robot","store","options","location","action","randomGenerator","nextLocation","actionStartTime","keepLocation","observable","getRobotsObservable","addRobot","SHOP","setLocation","initialLocation","currentTime","actionTotalDuration","actionCurrentDuration","randomBetweenTwoValues","_endAction","_moveTo","_mineFoo","_mineBar","_assemble","_buyRobot","setFoosAmount","getFoosAmount","setBarsAmount","getBarsAmount","randomPercentageSuccess","setFoobarsAmount","getFoobarsAmount","checkAvailable","_checkLocationSpecified","_checkNotKeepingLocation","TRANSITION","FOO_MINE","BAR_MINE","_checkLocation","ASSEMBLING_FACTORY","_checkRessources","getNextLocation","getKeepLocation","errorMessageBeginning","neededRessources","isAvailable","_canDoAction","subscribe","locations","getRobots","robot","getLocation","trigger","Store","foosAmount","barsAmount","fooBarsAmount","robots","robotsObservable","amount","length","Game","strategy","dateTime","started","startTime","getCurrentTime","requestId","nextFrame","actOnOneFrame","requestAnimationFrame","cancelAnimationFrame","id","setNextLocation","subscribeToRobots","BasicStrategy","automaticMovementProbability","automaticLocationProbabilities","weight","probability","tick","startMoving","_handleAutomaticActions","_doAutomaticMove","_doAutomaticOtherActions","possibleLocations","delete","chosenLocation","chooseValue","exception","message","includes","startMining","canAssemble","startAssembling","canBuyRobot","startBuyingRobot","GameContext","React","createContext","Span","styled","span","Counter","game","useContext","useState","time","setTime","formatNumber","number","useEffect","interval","setInterval","getStarted","clearInterval","getStartTime","date","getMinutes","sec","getSeconds","formatDate","liStyle","css","Li","li","first","useStyles","makeStyles","root","transform","percentageMarks","label","SliderCommand","text","defaultValue","onChange","classes","Slider","valueLabelDisplay","onChangeCommitted","aria-labelledby","marks","className","List","ul","ProbabilityCommands","getStrategy","createLocationWeightChangeHandler","_","setLocationWeight","getAutomaticMovementProbability","setAutomaticMovementProbability","getLocationWeight","useStoreState","initialValue","observed","storeState","setStoreState","subscribeToAmount","IncrementableMap","has","useRobotsAmountByLocation","robotsLocation","robotState","setRobotState","useRobotState","robotsAmountByLocation","useMemo","increment","circle","FooCircle","div","size","BarCircle","FactoryCircle","ShopCircle","MovingCircle","MainSquare","LabelFoo","Labelbar","LabelFactory","LabelShop","LabelMoving","RobotsLocations","totalRobotsAmount","computeCircleSize","robotsInlocation","sqrt","Label","Value","Statistics","foobarsAmount","robotsAmount","Main","main","Container","TitleContainer","Title","h1","Foobartory","useRef","current","start","Provider","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d481d02.chunk.js","sourcesContent":["enum ActionType {\n  MOVING = \"moving\",\n  MINING_FOO = \"mining foo\",\n  MINING_BAR = \"mining bar\",\n  ASSEMBLING = \"assembling\",\n  BUYING_ROBOT = \"buying robot\",\n  WAITING = \"waiting\",\n}\n\ninterface ActionBase {\n  actionType: ActionType;\n}\ninterface ActionWithDuration extends ActionBase {\n  totalDuration: number;\n}\ninterface ActionWithRandom extends ActionBase {\n  randomBetween: [number, number];\n}\n\ntype Action = ActionWithDuration | ActionWithRandom;\n\nconst MOVING: Action = {\n  actionType: ActionType.MOVING,\n  totalDuration: 5000,\n};\n\nconst MINING_FOO: Action = {\n  actionType: ActionType.MINING_FOO,\n  totalDuration: 1000,\n};\n\nconst MINING_BAR: Action = {\n  actionType: ActionType.MINING_BAR,\n  randomBetween: [500, 2000],\n};\n\nconst ASSEMBLING: Action = {\n  actionType: ActionType.ASSEMBLING,\n  totalDuration: 2000,\n};\n\nconst BUYING_ROBOT: Action = {\n  actionType: ActionType.BUYING_ROBOT,\n  totalDuration: 0,\n};\n\nconst WAITING: Action = {\n  actionType: ActionType.WAITING,\n  totalDuration: 0,\n};\n\ntype NeededRessources = {\n  foos: number;\n  bars: number;\n  foobars: number;\n};\n\nconst ASSEMBLING_NEEDED_RESSOURCES: NeededRessources = {\n  foos: 1,\n  bars: 1,\n  foobars: 0,\n};\n\nconst BUYING_ROBOT_NEEDED_RESSOURCES: NeededRessources = {\n  foos: 6,\n  bars: 0,\n  foobars: 3,\n};\n\nexport {\n  MOVING,\n  MINING_BAR,\n  MINING_FOO,\n  ASSEMBLING,\n  BUYING_ROBOT,\n  WAITING,\n  ASSEMBLING_NEEDED_RESSOURCES,\n  BUYING_ROBOT_NEEDED_RESSOURCES,\n};\nexport type { Action, NeededRessources };\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","interface DateTime {\n  getCurrentTime(): number;\n}\n\nclass FakeDateTime implements DateTime {\n  constructor(private time: number = 0) {}\n\n  advance(miliseconds: number) {\n    this.time += miliseconds;\n  }\n\n  getCurrentTime(): number {\n    return this.time;\n  }\n}\n\nclass RealDateTime implements DateTime {\n  getCurrentTime(): number {\n    return Date.now();\n  }\n}\n\nexport { FakeDateTime, RealDateTime };\nexport type { DateTime };\n","class Observable<Observed> {\n  constructor(protected callbacks: Map<Observed, Function[]> = new Map()) {}\n\n  subscribe(information: Observed, callback: Function) {\n    this.callbacks.get(information)?.push(callback);\n  }\n\n  trigger<T>(information: Observed, value: T) {\n    const callbacks = this.callbacks.get(information);\n    if (callbacks) {\n      callbacks.forEach(function callObservers(callback) {\n        callback(value);\n      });\n    }\n  }\n}\n\nenum ObservedRobot {\n  ROBOT_LOCATION,\n}\n\nclass ObservableRobot extends Observable<ObservedRobot> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedRobot.ROBOT_LOCATION, []);\n  }\n}\n\nenum ObservedAmount {\n  FOOS_AMOUNT,\n  BARS_AMOUNT,\n  FOOBARS_AMOUNT,\n  ROBOTS_AMOUNT,\n}\n\nclass ObservableStore extends Observable<ObservedAmount> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedAmount.FOOS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.BARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.FOOBARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.ROBOTS_AMOUNT, []);\n  }\n}\n\nexport {\n  Observable,\n  ObservableRobot,\n  ObservedRobot,\n  ObservableStore,\n  ObservedAmount,\n};\n","import {\n  Action,\n  ASSEMBLING,\n  ASSEMBLING_NEEDED_RESSOURCES,\n  BUYING_ROBOT,\n  BUYING_ROBOT_NEEDED_RESSOURCES,\n  MINING_BAR,\n  MINING_FOO,\n  MOVING,\n  NeededRessources,\n  WAITING,\n} from \"./actions\";\nimport { ObservableRobot, ObservedRobot } from \"./Observable\";\nimport { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Store } from \"./Store\";\n\nenum Location {\n  FOO_MINE = \"foo mine\",\n  BAR_MINE = \"bar mine\",\n  ASSEMBLING_FACTORY = \"assembling factory\",\n  SHOP = \"shop\",\n  TRANSITION = \"transition\",\n}\n\ntype RobotOptions = {\n  randomGenerator?: RandomGenerator;\n  initialLocation?: Location;\n};\n\n/**\n * The robot is the main character. It does nothing by itself except\n * finishing the execution of the actions it was asked to start.\n * To make it finish its actions, it needs to get regularly its method\n * tick() called with the current time.\n */\nclass Robot {\n  private location: Location;\n  private action: Action;\n  private randomGenerator: RandomGenerator;\n  private nextLocation: Location | null;\n  private actionStartTime: number | null;\n  private keepLocation;\n  private observable: ObservableRobot;\n\n  constructor(private store: Store, options?: RobotOptions) {\n    this.nextLocation = null;\n    this.keepLocation = false;\n    this.action = WAITING;\n    this.actionStartTime = null;\n    this.observable = store.getRobotsObservable();\n    this.store.addRobot(this);\n    this.location = Location.SHOP;\n    this.setLocation(\n      options?.initialLocation ? options.initialLocation : Location.SHOP\n    );\n    this.randomGenerator = options?.randomGenerator\n      ? options?.randomGenerator\n      : new RealRandomGenerator();\n  }\n\n  /**\n   * If the current action duration has been reached, ends the\n   * action to make the robot available again, and executes its\n   * consequences.\n   * @param currentTime the current time in miliseconds.\n   */\n  tick(currentTime: number) {\n    if (this.actionStartTime !== null) {\n      const actionCurrentDuration = currentTime - this.actionStartTime;\n      let actionTotalDuration: number;\n      if (\"randomBetween\" in this.action) {\n        actionTotalDuration = this.randomGenerator.randomBetweenTwoValues(\n          ...this.action.randomBetween\n        );\n      } else {\n        actionTotalDuration = this.action.totalDuration;\n      }\n      if (actionCurrentDuration >= actionTotalDuration) {\n        this._endAction();\n      }\n    }\n  }\n\n  _endAction() {\n    switch (this.action.actionType) {\n      case MOVING.actionType: {\n        if (this.nextLocation) {\n          this._moveTo(this.nextLocation);\n        } else {\n          throw new Error(\n            \"The robot can't end its move without a location specified.\"\n          );\n        }\n        break;\n      }\n      case MINING_FOO.actionType: {\n        this._mineFoo();\n        break;\n      }\n      case MINING_BAR.actionType: {\n        this._mineBar();\n        break;\n      }\n      case ASSEMBLING.actionType: {\n        this._assemble();\n        break;\n      }\n      case BUYING_ROBOT.actionType: {\n        this._buyRobot();\n        break;\n      }\n      default: {\n        throw new Error(\n          `There is a start time defined for an action, but the action of the robot is incorrect (${this.action.actionType}).`\n        );\n      }\n    }\n    this.action = WAITING;\n    this.actionStartTime = null;\n  }\n\n  private _moveTo(location: Location) {\n    this.setLocation(location);\n    this.nextLocation = null;\n  }\n\n  private _mineFoo() {\n    this.store.setFoosAmount(this.store.getFoosAmount() + 1);\n  }\n\n  private _mineBar() {\n    this.store.setBarsAmount(this.store.getBarsAmount() + 1);\n  }\n\n  private _assemble() {\n    const isAssemblingSuccessful =\n      this.randomGenerator.randomPercentageSuccess(60);\n    if (isAssemblingSuccessful) {\n      this.store.setFoobarsAmount(this.store.getFoobarsAmount() + 1);\n    } else {\n      this.store.setBarsAmount(this.store.getBarsAmount() + 1);\n    }\n  }\n\n  private _buyRobot() {\n    new Robot(this.store);\n  }\n\n  startMoving(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocationSpecified();\n    this._checkNotKeepingLocation();\n    this.setLocation(Location.TRANSITION);\n    this.action = MOVING;\n    this.actionStartTime = currentTime;\n  }\n\n  startMining(currentTime: number) {\n    this.checkAvailable();\n    if (this.location === Location.FOO_MINE) {\n      this.action = MINING_FOO;\n    } else if (this.location === Location.BAR_MINE) {\n      this.action = MINING_BAR;\n    } else {\n      throw new Error(\n        `The robot has to be in a mine to mine, here it is in ${this.location}.`\n      );\n    }\n    this.actionStartTime = currentTime;\n  }\n\n  startAssembling(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocation(Location.ASSEMBLING_FACTORY);\n    this._checkRessources(\n      \"To create a foobar the robot needs one foo and one bar\",\n      ASSEMBLING_NEEDED_RESSOURCES\n    );\n\n    this.action = ASSEMBLING;\n    this.actionStartTime = currentTime;\n    this.store.setBarsAmount(this.store.getBarsAmount() - 1);\n    this.store.setFoosAmount(this.store.getFoosAmount() - 1);\n  }\n\n  startBuyingRobot(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocation(Location.SHOP);\n    this._checkRessources(\n      \"To buy a new robot, the robot needs 6 foos and 3 foobars\",\n      BUYING_ROBOT_NEEDED_RESSOURCES\n    );\n    this.action = BUYING_ROBOT;\n    this.actionStartTime = currentTime;\n    this.store.setFoobarsAmount(this.store.getFoobarsAmount() - 3);\n    this.store.setFoosAmount(this.store.getFoosAmount() - 6);\n  }\n\n  private _checkLocation(location: Location) {\n    if (location !== this.location) {\n      throw new Error(\n        `The robot has to be in the ${location}, here it is in ${this.location}.`\n      );\n    }\n  }\n\n  private _checkLocationSpecified() {\n    if (!this.getNextLocation()) {\n      throw new Error(\n        \"The robot can't start moving without next location specified.\"\n      );\n    }\n  }\n\n  private _checkNotKeepingLocation() {\n    if (this.getKeepLocation()) {\n      throw new Error(\n        \"The robot can't start moving while it has been asked to keep its location.\"\n      );\n    }\n  }\n\n  private _checkRessources(\n    errorMessageBeginning: string,\n    neededRessources: NeededRessources\n  ) {\n    const enoughRessources =\n      this.store.getFoobarsAmount() >= neededRessources.foobars &&\n      this.store.getFoosAmount() >= neededRessources.foos &&\n      this.store.getBarsAmount() >= neededRessources.bars;\n    if (!enoughRessources) {\n      throw new Error(\n        `${errorMessageBeginning}.\n        There are only ${this.store.getFoosAmount()} foos, ${this.store.getBarsAmount()} bars and ${this.store.getFoobarsAmount()} foobars.`\n      );\n    }\n  }\n\n  private checkAvailable() {\n    if (!this.isAvailable()) {\n      throw new Error(`The robot is not available yet`);\n    }\n  }\n\n  canAssemble(): boolean {\n    return this._canDoAction(ASSEMBLING_NEEDED_RESSOURCES);\n  }\n\n  canBuyRobot(): boolean {\n    return this._canDoAction(BUYING_ROBOT_NEEDED_RESSOURCES);\n  }\n\n  private _canDoAction(neededRessources: NeededRessources) {\n    try {\n      this._checkRessources(\"\", neededRessources);\n    } catch {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * State the availability of the robot. A new action can't be started\n   * without the robot being available.\n   */\n  isAvailable(): boolean {\n    return this.action === WAITING;\n  }\n\n  subscribe(information: ObservedRobot, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  /**\n   * Set the next location where starting to move will lead.\n   * A movement can't be started without that location set.\n   */\n  setNextLocation(location: Location) {\n    this.nextLocation = location;\n  }\n\n  getNextLocation(): Location | null {\n    return this.nextLocation;\n  }\n\n  getLocation() {\n    return this.location;\n  }\n\n  setLocation(location: Location) {\n    this.location = location;\n    const locations: Location[] = [];\n    this.store.getRobots().forEach((robot) => {\n      locations.push(robot.getLocation());\n    });\n    this.observable.trigger(ObservedRobot.ROBOT_LOCATION, locations);\n  }\n\n  getAction() {\n    return this.action;\n  }\n\n  setKeepLocation(keepLocation: boolean) {\n    this.keepLocation = keepLocation;\n  }\n\n  getKeepLocation() {\n    return this.keepLocation;\n  }\n}\n\nexport { Robot, Location, ObservedRobot };\n","type WeightedValues<T> = Map<T, number>;\n\ninterface RandomGenerator {\n  /**\n   * Compute a boolean according to a given percentage.\n   * @param percentage the percentage of chances to be true\n   *     (value between 0 and 100).\n   */\n  randomPercentageSuccess(percentage: number): boolean;\n\n  /**\n   * Compute a value between two given values\n   */\n  randomBetweenTwoValues(min: number, max: number): number;\n\n  /**\n   * Choose randomly one of the provided values, according to\n   * the given weights for each value.\n   * If the weight is 0, the value will never be chosen, if it\n   * is a positive number, the bigger it will be compared to\n   * the weight of the other values, the more chances it will\n   * have to be chosen.\n   * @param values the chosen value.\n   */\n  chooseValue<T>(values: WeightedValues<T>): T;\n}\n\nclass RealRandomGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    if (percentage < 0 || percentage > 100) {\n      throw new Error(\n        `The given percentage has to be between 0 and 100, not ${percentage}.`\n      );\n    }\n    const random = Math.random() * 100;\n    if (random < percentage) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    const value = min + Math.random() * (max - min);\n    return value;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    this._checkWeights(values);\n    const weightsSum = Array.from(values.values()).reduce((a, b) => a + b);\n    const random = Math.random() * weightsSum;\n    let chosenValue: T = values.entries().next().value;\n    let sum = 0;\n    for (let [key, value] of values) {\n      sum += value;\n      if (random <= sum) {\n        chosenValue = key;\n        break;\n      }\n    }\n    return chosenValue;\n  }\n\n  private _checkWeights<T>(values: WeightedValues<T>) {\n    const weights = Array.from(values.values());\n    const negativeWeight = weights.some((x) => x < 0);\n    if (negativeWeight) {\n      const entries = Array.from(values.entries());\n      throw new Error(`Negative weights are not allowed. Entries: ${entries}`);\n    }\n    const onlyZeroWeights = weights.every((x) => x === 0);\n    if (onlyZeroWeights) {\n      const entries = Array.from(values.entries());\n      throw new Error(\n        `At least one of the weights has to be > 0. Entries: ${entries}`\n      );\n    }\n  }\n}\n\n/**\n * Fake generator always returning true or the maximal value,\n * used for tests.\n */\nclass SuccessGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return true;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return max;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const biggestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] > v2[1] ? v1 : v2\n    );\n    return biggestPair[0];\n  }\n}\n\n/**\n * Fake generator always returning false or the minimal value,\n * used for tests.\n */\nclass FailureGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return false;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return min;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const smallestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] < v2[1] ? v1 : v2\n    );\n    return smallestPair[0];\n  }\n}\n\nexport { RealRandomGenerator, SuccessGenerator, FailureGenerator };\nexport type { RandomGenerator, WeightedValues };\n","import {\n  ObservableRobot,\n  ObservableStore,\n  ObservedAmount,\n  ObservedRobot,\n} from \"./Observable\";\nimport { Robot } from \"./Robot\";\n\nclass Store {\n  private foosAmount: number;\n  private barsAmount: number;\n  private fooBarsAmount: number;\n  private robots: Robot[];\n  private observable: ObservableStore;\n  private robotsObservable: ObservableRobot;\n\n  constructor() {\n    this.observable = new ObservableStore();\n    this.robotsObservable = new ObservableRobot();\n    this.foosAmount = 0;\n    this.barsAmount = 0;\n    this.fooBarsAmount = 0;\n    this.robots = [];\n  }\n\n  subscribe(information: ObservedAmount, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.robotsObservable.subscribe(information, callback);\n  }\n\n  setFoosAmount(amount: number) {\n    this.foosAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOS_AMOUNT, this.foosAmount);\n  }\n\n  getFoosAmount() {\n    return this.foosAmount;\n  }\n\n  setBarsAmount(amount: number) {\n    this.barsAmount = amount;\n    this.observable.trigger(ObservedAmount.BARS_AMOUNT, this.barsAmount);\n  }\n\n  getBarsAmount() {\n    return this.barsAmount;\n  }\n\n  setFoobarsAmount(amount: number) {\n    this.fooBarsAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOBARS_AMOUNT, this.fooBarsAmount);\n  }\n\n  getFoobarsAmount() {\n    return this.fooBarsAmount;\n  }\n\n  addRobot(robot: Robot) {\n    this.robots.push(robot);\n    this.observable.trigger(ObservedAmount.ROBOTS_AMOUNT, this.robots.length);\n  }\n\n  getRobots() {\n    return this.robots;\n  }\n\n  getRobotsObservable() {\n    return this.robotsObservable;\n  }\n}\n\nexport { Store, ObservedAmount, ObservedRobot };\n","import { DateTime, RealDateTime } from \"./DateTime\";\nimport { ObservedAmount, ObservedRobot } from \"./Observable\";\nimport { Location, Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\nimport { Strategy } from \"./Strategy\";\n\nconst MAX_ROBOTS = 20;\n\ntype GameOptions = {\n  dateTime?: DateTime;\n};\nclass Game {\n  public store: Store;\n  private dateTime: DateTime;\n  private started: boolean;\n  private startTime: number | null;\n\n  constructor(private strategy: Strategy, options?: GameOptions) {\n    this.store = new Store();\n    this.dateTime = options?.dateTime ? options.dateTime : new RealDateTime();\n    new Robot(this.store);\n    new Robot(this.store);\n    this.started = false;\n    this.startTime = null;\n  }\n\n  start() {\n    this.started = true;\n    this.startTime = this.dateTime.getCurrentTime();\n    let requestId = 0;\n    const nextFrame = () => {\n      const now = this.dateTime.getCurrentTime();\n      this.strategy.actOnOneFrame(now, this.store);\n      if (this.started && this.store.getRobots().length < MAX_ROBOTS) {\n        requestId = requestAnimationFrame(nextFrame);\n      } else {\n        cancelAnimationFrame(requestId);\n        this.started = false;\n        this.startTime = null;\n      }\n    };\n    nextFrame();\n  }\n\n  stop() {\n    this.started = false;\n    this.startTime = null;\n  }\n\n  getStartTime() {\n    return this.startTime;\n  }\n\n  getStarted(): boolean {\n    return this.started;\n  }\n\n  getCurrentTime() {\n    if (this.started) {\n      return this.dateTime.getCurrentTime();\n    } else {\n      throw new Error(\"The game is not started\");\n    }\n  }\n\n  getStrategy(): Strategy {\n    return this.strategy;\n  }\n\n  setRobotNextLocation(id: number, location: Location) {\n    this.store.getRobots()[id].setNextLocation(location);\n  }\n\n  getRobotLocation(id: number): Location {\n    return this.store.getRobots()[id].getLocation();\n  }\n\n  subscribeToAmount(information: ObservedAmount, callback: Function) {\n    this.store.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.store.subscribeToRobots(information, callback);\n  }\n}\nexport { Game, MAX_ROBOTS };\n","import { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Location, Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\ninterface Strategy {\n  actOnOneFrame(currentTime: number, store: Store): void;\n}\n\ntype BasicStrategyOptions = {\n  randomGenerator?: RandomGenerator;\n};\n\n/**\n * Implements a basic strategy:\n * With a manual part taking priority:\n * - does not move robots that have been manually told to keep location.\n * - moves robots to the indicated manual location if there is one.\n * And an automatic part:\n * - chooses randomly to make an available robot move to a random\n *   location, or instead do an action if possible.\n * - the random aspect of moving or not, and where to move can be\n *   influenced manually.\n */\nclass BasicStrategy implements Strategy {\n  private randomGenerator: RandomGenerator;\n  private automaticMovementProbability: number;\n  private automaticLocationProbabilities: Map<Location, number>;\n\n  constructor(options?: BasicStrategyOptions) {\n    this.randomGenerator = options?.randomGenerator\n      ? options.randomGenerator\n      : new RealRandomGenerator();\n    this.automaticMovementProbability = 25;\n    this.automaticLocationProbabilities = new Map([\n      [Location.FOO_MINE, 50],\n      [Location.BAR_MINE, 50],\n      [Location.ASSEMBLING_FACTORY, 50],\n      [Location.SHOP, 50],\n    ]);\n  }\n\n  /**\n   * This influences the probability to choose automatically one\n   * location instead of another.\n   * @param location the location to influence.\n   * @param weight the heigher the value relatively to others, the\n   *   more chances to go there.\n   */\n  setLocationWeight(location: Location, weight: number) {\n    if (weight < 0) {\n      throw new Error(\n        `The assigned weight ${weight} has to be greater than 0.`\n      );\n    }\n    this.automaticLocationProbabilities.set(location, weight);\n  }\n\n  getLocationWeight(location: Location) {\n    return this.automaticLocationProbabilities.get(location);\n  }\n\n  /**\n   * The percentage of chances to get an automatic move each time.\n   */\n  setAutomaticMovementProbability(probability: number) {\n    this.automaticMovementProbability = probability;\n  }\n\n  getAutomaticMovementProbability() {\n    return this.automaticMovementProbability;\n  }\n\n  /**\n   * Do some action on the content of the store, including robots.\n   * This function is called by the game several times per second.\n   * @param currentTime the time where the function is called.\n   */\n  actOnOneFrame(currentTime: number, store: Store) {\n    store.getRobots().forEach((robot) => {\n      robot.tick(currentTime);\n      if (robot.isAvailable()) {\n        const shouldDoManualMove =\n          robot.getNextLocation() && !robot.getKeepLocation();\n        if (shouldDoManualMove) {\n          robot.startMoving(currentTime);\n        } else {\n          this._handleAutomaticActions(robot, currentTime);\n        }\n      }\n    });\n  }\n\n  private _handleAutomaticActions(robot: Robot, currentTime: number) {\n    const shouldAutomaticallyMove =\n      this.randomGenerator.randomPercentageSuccess(\n        this.automaticMovementProbability\n      ) && !robot.getKeepLocation();\n    if (shouldAutomaticallyMove) {\n      this._doAutomaticMove(robot, currentTime);\n    } else {\n      this._doAutomaticOtherActions(robot, currentTime);\n    }\n  }\n\n  private _doAutomaticMove(robot: Robot, currentTime: number) {\n    const possibleLocations = new Map(this.automaticLocationProbabilities);\n    possibleLocations.delete(robot.getLocation());\n    try {\n      const chosenLocation =\n        this.randomGenerator.chooseValue(possibleLocations);\n      robot.setNextLocation(chosenLocation);\n      robot.startMoving(currentTime);\n    } catch (exception) {\n      if (\n        exception.message.includes(\"At least one of the weights has to be > 0\")\n      ) {\n        // in case of wrong weights (eg. (0, 0, 0)), we just don't move\n      } else {\n        throw exception;\n      }\n    }\n  }\n\n  private _doAutomaticOtherActions(robot: Robot, currentTime: number) {\n    switch (robot.getLocation()) {\n      case Location.FOO_MINE:\n      case Location.BAR_MINE:\n        robot.startMining(currentTime);\n        break;\n      case Location.ASSEMBLING_FACTORY:\n        if (robot.canAssemble()) {\n          robot.startAssembling(currentTime);\n        }\n        break;\n      case Location.SHOP:\n        if (robot.canBuyRobot()) {\n          robot.startBuyingRobot(currentTime);\n        }\n        break;\n      default:\n        throw new Error(\n          `An action has been requested while the robot was the wrong location (${robot.getLocation()}).`\n        );\n    }\n  }\n}\n\nexport { BasicStrategy };\nexport type { Strategy };\n","import React from \"react\";\nimport { BasicStrategy, Game } from \"../../domain\";\n\nconst GameContext = React.createContext<Game>(new Game(new BasicStrategy()));\n\nexport default GameContext;\n","import styled from \"@emotion/styled\";\nimport { useContext, useEffect, useState } from \"react\";\nimport GameContext from \"../../contexts/game\";\n\nconst Span = styled.span`\n  font-size: 1.6rem;\n  padding: 0.5rem 0;\n\n  @media (min-width: 600px) {\n    font-size: 1.7rem;\n  }\n  @media (min-width: 950px) {\n    font-size: 1.8rem;\n  }\n`;\n\n/**\n * Count the current time according to the game internal date time.\n * The counter freezes when the game is finished.\n */\nfunction Counter() {\n  const game = useContext(GameContext);\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (game.getStarted()) {\n        try {\n          setTime(game.getCurrentTime());\n        } catch {\n          clearInterval(interval);\n        }\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [game]);\n\n  function formatDate(time: number) {\n    const startTime = game.getStartTime();\n    if (startTime) {\n      const date = new Date(time - startTime);\n      const min = formatNumber(date.getMinutes());\n      const sec = formatNumber(date.getSeconds());\n      return `${min}:${sec}`;\n    } else {\n      return \"00:00\";\n    }\n  }\n  function formatNumber(number: number) {\n    return number < 10 ? \"0\" + number : \"\" + number;\n  }\n\n  return <Span>{formatDate(time)}</Span>;\n}\n\nexport default Counter;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst liStyle = css`\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0;\n`;\n\ntype LiProps = {\n  first?: boolean;\n};\n\nconst Li = styled.li<LiProps>`\n  ${liStyle}\n  ${({ first }) =>\n    first\n      ? `margin-bottom: 2rem;\n        @media (min-width: 950px) {\n          margin-bottom: 0;\n          grid-column: span 2;\n          width: 60%;\n          justify-self: center;\n        }`\n      : \"\"}\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    '& .MuiSlider-markLabel[data-index=\"0\"]': {\n      transform: \"translateX(0%)\",\n    },\n    '& .MuiSlider-markLabel[data-index=\"1\"]': {\n      transform: \"translateX(-100%)\",\n    },\n  },\n});\n\nconst percentageMarks = [\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 100,\n    label: \"100%\",\n  },\n];\n\ntype SliderCommandProps = {\n  id: string;\n  text: string;\n  defaultValue: number | undefined;\n  onChange: (event: object, value: number | number[]) => void;\n  first?: boolean;\n};\n\nfunction SliderCommand({\n  id,\n  text,\n  defaultValue,\n  onChange,\n  first,\n}: SliderCommandProps) {\n  const classes = useStyles();\n  return (\n    <Li first={first}>\n      <label id={id}>{text}</label>\n      <Slider\n        defaultValue={defaultValue}\n        valueLabelDisplay=\"auto\"\n        onChangeCommitted={onChange}\n        aria-labelledby={id}\n        marks={first && percentageMarks}\n        className={classes.root}\n      />\n    </Li>\n  );\n}\n\nexport default SliderCommand;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { BasicStrategy, Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport SliderCommand from \"./SliderCommand\";\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  padding-top: 2rem;\n  border-top: solid 1px #ddd;\n  display: grid;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n    border: none;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1.3fr 1fr 1fr;\n    column-gap: 5%;\n  }\n`;\n\n/**\n * Provide slider commands to control the game automatic mode\n * by influencing the random actions.\n */\nfunction ProbabilityCommands() {\n  const game = useContext(GameContext);\n  const strategy = game.getStrategy() as BasicStrategy;\n  function handleMovementProbabilityChange(\n    _: object,\n    value: number | number[]\n  ) {\n    strategy.setAutomaticMovementProbability(value as number);\n  }\n  function createLocationWeightChangeHandler(location: Location) {\n    return function handleLocationWeightChange(\n      _: object,\n      value: number | number[]\n    ) {\n      strategy.setLocationWeight(location, value as number);\n    };\n  }\n  return (\n    <List>\n      <SliderCommand\n        id=\"movement-probability\"\n        text=\"Probability to move\"\n        defaultValue={strategy.getAutomaticMovementProbability()}\n        onChange={handleMovementProbabilityChange}\n        first={true}\n      />\n      <SliderCommand\n        id=\"foo-mine-weight\"\n        text=\"Foo mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.FOO_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.FOO_MINE)}\n      />\n      <SliderCommand\n        id=\"bar-mine-weight\"\n        text=\"Bar mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.BAR_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.BAR_MINE)}\n      />\n      <SliderCommand\n        id=\"assembling-factory-weight\"\n        text=\"Assembling factory weight\"\n        defaultValue={strategy.getLocationWeight(Location.ASSEMBLING_FACTORY)}\n        onChange={createLocationWeightChangeHandler(\n          Location.ASSEMBLING_FACTORY\n        )}\n      />\n      <SliderCommand\n        id=\"shop-weight\"\n        text=\"Shop weight\"\n        defaultValue={strategy.getLocationWeight(Location.SHOP)}\n        onChange={createLocationWeightChangeHandler(Location.SHOP)}\n      />\n    </List>\n  );\n}\n\nexport default ProbabilityCommands;\n","import { useEffect, useState } from \"react\";\nimport { Game, ObservedAmount, ObservedRobot } from \"../../domain\";\n\n/**\n * These hooks create observer states, subscribing to the game\n * observable API.\n */\n\ninterface UseGameStateProps<T> {\n  game: Game;\n  initialValue: T;\n}\n\ninterface UseStoreStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedAmount;\n}\n\ninterface UseRobotStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedRobot;\n}\n\nfunction useStoreState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseStoreStateProps<T>) {\n  const [storeState, setStoreState] = useState<T>(initialValue);\n  useEffect(\n    function observeStore() {\n      game.subscribeToAmount(observed, setStoreState);\n    },\n    [game, observed]\n  );\n  return storeState;\n}\n\nfunction useRobotState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseRobotStateProps<T>) {\n  const [robotState, setRobotState] = useState<T>(initialValue);\n  useEffect(\n    function observeRobot() {\n      game.subscribeToRobots(observed, setRobotState);\n    },\n    [game, observed]\n  );\n  return robotState;\n}\n\nexport { useStoreState, useRobotState };\n","class IncrementableMap<T> extends Map<T, number> {\n  increment(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) + 1);\n  }\n  decrement(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) - 1);\n  }\n}\n\nexport { IncrementableMap };\n","import { useMemo } from \"react\";\nimport { Game, Location, ObservedRobot } from \"../../domain\";\nimport { IncrementableMap } from \"../../utils\";\nimport { useRobotState } from \"./useGameState\";\n\n/**\n * Build and return a Map associating locations with the number\n * of robots on that location.\n */\nfunction useRobotsAmountByLocation(game: Game) {\n  const robotsLocation = useRobotState<Location[]>({\n    game,\n    initialValue: [],\n    observed: ObservedRobot.ROBOT_LOCATION,\n  });\n\n  const robotsAmountByLocation = useMemo(() => {\n    let locations = new IncrementableMap<Location>([\n      [Location.FOO_MINE, 0],\n      [Location.BAR_MINE, 0],\n      [Location.ASSEMBLING_FACTORY, 0],\n      [Location.SHOP, 0],\n      [Location.TRANSITION, 0],\n    ]);\n    robotsLocation.forEach((location) => {\n      locations.increment(location);\n    });\n    return locations;\n  }, [robotsLocation]);\n\n  return { robotsAmountByLocation };\n}\n\nexport { useRobotsAmountByLocation };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\n\ntype CircleProps = {\n  size: number;\n};\n\nconst circle = css`\n  position: absolute;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  transition-property: width, height, top, left, font-size;\n  background-color: #333;\n  color: #eee;\n  display: grid;\n  place-content: center;\n`;\n\nconst FooCircle = styled.div<CircleProps>`\n  ${circle}\n  top: 0;\n  left: 0;\n  width: ${({ size }) => size}rem;\n  height: ${({ size }) => size}rem;\n  font-size: ${({ size }) => size / 1.5}rem;\n`;\n\nconst BarCircle = styled.div<CircleProps>`\n  ${circle}\n  top: 0;\n  right: 0;\n  width: ${({ size }) => size}rem;\n  height: ${({ size }) => size}rem;\n  font-size: ${({ size }) => size / 1.5}rem;\n`;\n\nconst FactoryCircle = styled.div<CircleProps>`\n  ${circle}\n  bottom: 0;\n  left: 0;\n  width: ${({ size }) => size}rem;\n  height: ${({ size }) => size}rem;\n  font-size: ${({ size }) => size / 1.5}rem;\n`;\n\nconst ShopCircle = styled.div<CircleProps>`\n  ${circle}\n  bottom: 0;\n  right: 0;\n  width: ${({ size }) => size}rem;\n  height: ${({ size }) => size}rem;\n  font-size: ${({ size }) => size / 1.5}rem;\n`;\n\nconst MovingCircle = styled.div<CircleProps>`\n  ${circle}\n  top: calc(50% - calc(${({ size }) => size}rem / 2));\n  left: calc(50% - calc(${({ size }) => size}rem / 2));\n  width: ${({ size }) => size}rem;\n  height: ${({ size }) => size}rem;\n  font-size: ${({ size }) => size / 1.5}rem;\n`;\n\nexport { FooCircle, BarCircle, FactoryCircle, ShopCircle, MovingCircle };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { useRobotsAmountByLocation } from \"../../hooks\";\nimport {\n  BarCircle,\n  FactoryCircle,\n  FooCircle,\n  MovingCircle,\n  ShopCircle,\n} from \"./Circles\";\n\nconst MainSquare = styled.ul`\n  height: 15rem;\n  position: relative;\n  margin: 3rem 0 3.7rem 0;\n  list-style-type: none;\n  padding: 0;\n\n  @media (min-width: 950px) {\n    flex: 1.35;\n    height: 17rem;\n  }\n`;\n\nconst label = css`\n  position: absolute;\n  font-weight: bold;\n  padding: 0.2rem 0;\n`;\nconst LabelFoo = styled.span`\n  ${label}\n  top: -2.1rem;\n  left: 0;\n`;\nconst Labelbar = styled.span`\n  ${label}\n  top: -2.1rem;\n  right: 0;\n`;\nconst LabelFactory = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  left: 0;\n`;\nconst LabelShop = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  right: 0;\n`;\nconst LabelMoving = styled.span`\n  ${label}\n  transition: all 0.3s ease;\n  transition-property: top, left;\n  color: black;\n  font-size: 1.13rem;\n  bottom: -2rem;\n  left: calc(50% - 2rem);\n`;\n\n/**\n * Display a high level graphical view robots locations.\n */\nfunction RobotsLocations() {\n  const game = useContext(GameContext);\n  const { robotsAmountByLocation } = useRobotsAmountByLocation(game);\n  const totalRobotsAmount = game.store.getRobots().length;\n\n  function computeCircleSize(location: Location) {\n    const robotsInlocation = robotsAmountByLocation.get(location);\n    /* With the square root division the circle sizes increase in a\n       softer way: a circle with 1 robot will be 3.9 times smaller\n       than a circle with 15 robots, instead of 15 times smaller. */\n    return totalRobotsAmount && robotsInlocation\n      ? (Math.sqrt(robotsInlocation) / Math.sqrt(totalRobotsAmount)) * 7\n      : 0;\n  }\n  return (\n    <MainSquare>\n      <li>\n        <LabelFoo>Foo mine</LabelFoo>\n        <FooCircle size={computeCircleSize(Location.FOO_MINE)}>\n          {robotsAmountByLocation.get(Location.FOO_MINE)}\n        </FooCircle>\n      </li>\n      <li>\n        <Labelbar>Bar mine</Labelbar>\n        <BarCircle size={computeCircleSize(Location.BAR_MINE)}>\n          {robotsAmountByLocation.get(Location.BAR_MINE)}\n        </BarCircle>\n      </li>\n      <li>\n        <LabelFactory>Assembling factory</LabelFactory>\n        <FactoryCircle size={computeCircleSize(Location.ASSEMBLING_FACTORY)}>\n          {robotsAmountByLocation.get(Location.ASSEMBLING_FACTORY)}\n        </FactoryCircle>\n      </li>\n      <li>\n        <LabelShop>Shop</LabelShop>\n        <ShopCircle size={computeCircleSize(Location.SHOP)}>\n          {robotsAmountByLocation.get(Location.SHOP)}\n        </ShopCircle>\n      </li>\n      <li>\n        <MovingCircle size={computeCircleSize(Location.TRANSITION)}>\n          <LabelMoving>Moving</LabelMoving>\n          {robotsAmountByLocation.get(Location.TRANSITION)}\n        </MovingCircle>\n      </li>\n    </MainSquare>\n  );\n}\n\nexport default RobotsLocations;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { MAX_ROBOTS, ObservedAmount } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { useStoreState } from \"../../hooks\";\n\nconst List = styled.ul`\n  display: flex;\n  list-style-type: none;\n  padding: 0;\n  justify-content: space-around;\n  background-color: #eee;\n  border-radius: 0.3rem;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);\n  padding: 0.3rem 0;\n\n  @media (min-width: 950px) {\n    flex: 1;\n    margin-right: 7%;\n    flex-wrap: wrap;\n    border-radius: 0.4rem;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.15);\n  }\n  @media (min-width: 1200px) {\n    margin-right: 6%;\n  }\n`;\nconst Li = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (min-width: 950px) {\n    flex-basis: 50%;\n    justify-content: center;\n  }\n`;\n\nconst Label = styled.span`\n  font-weight: bold;\n  padding: 0.2rem 0.4rem;\n\n  @media (min-width: 950px) {\n    margin-bottom: 0.3rem;\n  }\n`;\nconst Value = styled.span`\n  padding: 0.2rem 0.4rem;\n  font-size: 1.1rem;\n\n  @media (min-width: 500px) {\n    font-size: 1.4rem;\n  }\n  @media (min-width: 950px) {\n    padding-top: 0.3rem;\n    font-size: 1.7rem;\n  }\n`;\n\n/**\n * Display statistics on what is available in the game store.\n */\nfunction Statistics() {\n  const game = useContext(GameContext);\n  const foosAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoosAmount(),\n    observed: ObservedAmount.FOOS_AMOUNT,\n  });\n  const barsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getBarsAmount(),\n    observed: ObservedAmount.BARS_AMOUNT,\n  });\n  const foobarsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoobarsAmount(),\n    observed: ObservedAmount.FOOBARS_AMOUNT,\n  });\n  const robotsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getRobots().length,\n    observed: ObservedAmount.ROBOTS_AMOUNT,\n  });\n  return (\n    <List>\n      <Li>\n        <Label>Foos</Label>\n        <Value>{foosAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Bars</Label>\n        <Value>{barsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Foobars</Label>\n        <Value>{foobarsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Robots</Label>\n        <Value>\n          {robotsAmount} / {MAX_ROBOTS}\n        </Value>\n      </Li>\n    </List>\n  );\n}\n\nexport default Statistics;\n","import styled from \"@emotion/styled\";\nimport { useEffect, useRef } from \"react\";\nimport { BasicStrategy, Game } from \"../domain\";\nimport { Counter } from \"./components/Counter\";\nimport { ProbabilityCommands } from \"./components/ProbabilityCommands\";\nimport { RobotsLocations } from \"./components/RobotsLocations\";\nimport { Statistics } from \"./components/Statistics\";\nimport GameContext from \"./contexts/game\";\nimport \"./global.css\";\n\nconst Main = styled.main`\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n\n  @media (min-width: 450px) {\n    padding: 1rem 2rem;\n  }\n  @media (min-width: 600px) {\n    padding: 1rem 8%;\n  }\n  @media (min-width: 950px) {\n    padding: 1rem 4rem;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  max-width: 1200px;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 950px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-content: flex-start;\n  }\n`;\n\nconst TitleContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 350px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n  padding: 0.5rem 0;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\n/**\n * The main component holding the whole app.\n */\nfunction Foobartory() {\n  const game = useRef(new Game(new BasicStrategy()));\n  useEffect(() => {\n    game.current.start();\n  }, []);\n  return (\n    <GameContext.Provider value={game.current}>\n      <Main role=\"main\">\n        <Container>\n          <TitleContainer>\n            <Title>Foobartory</Title>\n            <Counter />\n          </TitleContainer>\n          <Statistics />\n          <RobotsLocations />\n          <ProbabilityCommands />\n        </Container>\n      </Main>\n    </GameContext.Provider>\n  );\n}\n\nexport default Foobartory;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Foobartory from \"./ui/Foobartory\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Foobartory />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}