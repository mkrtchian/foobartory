{"version":3,"sources":["domain/actions.ts","reportWebVitals.ts","domain/DateTime.ts","domain/Observable.ts","domain/Robot.ts","domain/RandomGenerator.ts","domain/Store.ts","domain/Game.ts","domain/Strategy.ts","ui/contexts/game.ts","ui/components/Counter/Counter.tsx","ui/components/ProbabilityCommands/SliderCommand.tsx","ui/components/ProbabilityCommands/ProbabilityCommands.tsx","ui/components/RobotsLocations/arrows.tsx","ui/components/RobotsLocations/circles.tsx","utils.ts","ui/hooks/useGameState.ts","ui/components/RobotsLocations/useRobotsAmountByLocation.ts","ui/components/RobotsLocations/RobotsLocations.tsx","ui/components/Statistics/Statistics.tsx","ui/Foobartory.tsx","index.tsx"],"names":["ActionType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RealDateTime","Date","now","ObservedRobot","MOVING","actionType","totalDuration","MINING_FOO","MINING_BAR","randomBetween","ASSEMBLING","BUYING_ROBOT","WAITING","ASSEMBLING_NEEDED_RESSOURCES","foos","bars","foobars","BUYING_ROBOT_NEEDED_RESSOURCES","Observable","callbacks","Map","information","callback","this","get","push","value","forEach","ObservedAmount","ObservableRobot","set","ROBOT_LOCATION","ROBOT_NEXT_LOCATION","Location","ObservableStore","FOOS_AMOUNT","BARS_AMOUNT","FOOBARS_AMOUNT","ROBOTS_AMOUNT","RealRandomGenerator","percentage","Error","Math","random","min","max","values","_checkWeights","weightsSum","Array","from","reduce","a","b","chosenValue","entries","next","sum","key","weights","some","x","every","Robot","store","options","location","action","randomGenerator","nextLocation","actionStartTime","keepLocation","observable","previousLocation","previousAction","getRobotsObservable","addRobot","setNextLocation","SHOP","setLocation","initialLocation","currentTime","actionTotalDuration","actionCurrentDuration","randomBetweenTwoValues","_endAction","_moveTo","_mineFoo","_mineBar","_assemble","_buyRobot","setAction","setFoosAmount","getFoosAmount","setBarsAmount","getBarsAmount","randomPercentageSuccess","setFoobarsAmount","getFoobarsAmount","checkAvailable","_checkLocationSpecified","_checkNotKeepingLocation","TRANSITION","FOO_MINE","BAR_MINE","_checkLocation","ASSEMBLING_FACTORY","_checkRessources","getNextLocation","getKeepLocation","errorMessageBeginning","neededRessources","isAvailable","_canDoAction","subscribe","nextLocations","getRobots","robot","trigger","locations","getLocation","Store","foosAmount","barsAmount","fooBarsAmount","robots","robotsObservable","amount","length","Game","strategy","dateTime","started","startTime","getCurrentTime","requestId","nextFrame","actOnOneFrame","requestAnimationFrame","cancelAnimationFrame","id","subscribeToRobots","BasicStrategy","automaticMovementProbability","automaticLocationProbabilities","weight","probability","tick","startMoving","_handleAutomaticActions","hasJustMoved","getPreviousAction","_doAutomaticMove","_doAutomaticOtherActions","possibleLocations","delete","chosenLocation","chooseValue","exception","message","includes","startMining","canAssemble","startAssembling","canBuyRobot","startBuyingRobot","GameContext","React","createContext","Span","styled","span","Counter","game","useContext","useState","time","setTime","formatNumber","number","useEffect","interval","setInterval","getStarted","clearInterval","getStartTime","date","getMinutes","sec","getSeconds","formatDate","liStyle","css","Li","li","first","useStyles","makeStyles","root","transform","percentageMarks","label","SliderCommand","text","defaultValue","onChange","classes","Slider","valueLabelDisplay","onChangeCommitted","aria-labelledby","marks","className","List","ul","ProbabilityCommands","getStrategy","createLocationWeightChangeHandler","_","setLocationWeight","getAutomaticMovementProbability","setAutomaticMovementProbability","getLocationWeight","SMALL_RESPONSIVE_FACTOR","MEDIUM_RESPONSIVE_FACTOR","FooArrow","size","ArrowContainer","top","left","rotate","ArrowValue","right","BarArrow","FactoryArrow","bottom","ShopArrow","children","buildRules","buildVerticalPositionRule","buildHorizontalPositionRule","positionName","position","Arrow","xmlns","height","width","viewBox","d","circle","FooCircle","Circle","positions","BarCircle","FactoryCircle","ShopCircle","MovingCircle","IncrementableMap","has","useStoreState","initialValue","observed","storeState","setStoreState","subscribeToAmount","useRobotsValue","observedType","mapInitialValue","robotsNextLocation","robotState","setRobotState","useRobotState","robotsValues","useMemo","increment","MainSquare","FooLabel","BarLabel","FactoryLabel","ShopLabel","MovingLabel","RobotsLocations","robotsAmountByLocation","useRobotsAmountByLocation","robotsAmountByNextLocation","useRobotsAmountByNextLocation","totalRobotsAmount","totalRobotsWithNextLocation","accumulator","computeCircleSize","robotsInlocation","sqrt","computeArrowSize","robotsNextlocation","pow","Label","Value","Statistics","foobarsAmount","robotsAmount","Main","main","Container","div","TitleContainer","Title","h1","Foobartory","useRef","current","start","Provider","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b96d1ce.chunk.js","sourcesContent":["enum ActionType {\n  MOVING = \"moving\",\n  MINING_FOO = \"mining foo\",\n  MINING_BAR = \"mining bar\",\n  ASSEMBLING = \"assembling\",\n  BUYING_ROBOT = \"buying robot\",\n  WAITING = \"waiting\",\n}\n\ninterface ActionBase {\n  actionType: ActionType;\n}\ninterface ActionWithDuration extends ActionBase {\n  totalDuration: number;\n}\ninterface ActionWithRandom extends ActionBase {\n  randomBetween: [number, number];\n}\n\ntype Action = ActionWithDuration | ActionWithRandom;\n\nconst MOVING: Action = {\n  actionType: ActionType.MOVING,\n  totalDuration: 5000,\n};\n\nconst MINING_FOO: Action = {\n  actionType: ActionType.MINING_FOO,\n  totalDuration: 1000,\n};\n\nconst MINING_BAR: Action = {\n  actionType: ActionType.MINING_BAR,\n  randomBetween: [500, 2000],\n};\n\nconst ASSEMBLING: Action = {\n  actionType: ActionType.ASSEMBLING,\n  totalDuration: 2000,\n};\n\nconst BUYING_ROBOT: Action = {\n  actionType: ActionType.BUYING_ROBOT,\n  totalDuration: 0,\n};\n\nconst WAITING: Action = {\n  actionType: ActionType.WAITING,\n  totalDuration: 0,\n};\n\ntype NeededRessources = {\n  foos: number;\n  bars: number;\n  foobars: number;\n};\n\nconst ASSEMBLING_NEEDED_RESSOURCES: NeededRessources = {\n  foos: 1,\n  bars: 1,\n  foobars: 0,\n};\n\nconst BUYING_ROBOT_NEEDED_RESSOURCES: NeededRessources = {\n  foos: 6,\n  bars: 0,\n  foobars: 3,\n};\n\nexport {\n  MOVING,\n  MINING_BAR,\n  MINING_FOO,\n  ASSEMBLING,\n  BUYING_ROBOT,\n  WAITING,\n  ASSEMBLING_NEEDED_RESSOURCES,\n  BUYING_ROBOT_NEEDED_RESSOURCES,\n};\nexport type { Action, NeededRessources };\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","interface DateTime {\n  getCurrentTime(): number;\n}\n\nclass FakeDateTime implements DateTime {\n  constructor(private time: number = 0) {}\n\n  advance(miliseconds: number) {\n    this.time += miliseconds;\n  }\n\n  getCurrentTime(): number {\n    return this.time;\n  }\n}\n\nclass RealDateTime implements DateTime {\n  getCurrentTime(): number {\n    return Date.now();\n  }\n}\n\nexport { FakeDateTime, RealDateTime };\nexport type { DateTime };\n","class Observable<Observed> {\n  constructor(protected callbacks: Map<Observed, Function[]> = new Map()) {}\n\n  subscribe(information: Observed, callback: Function) {\n    this.callbacks.get(information)?.push(callback);\n  }\n\n  trigger<T>(information: Observed, value: T) {\n    const callbacks = this.callbacks.get(information);\n    if (callbacks) {\n      callbacks.forEach(function callObservers(callback) {\n        callback(value);\n      });\n    }\n  }\n}\n\nenum ObservedRobot {\n  ROBOT_LOCATION,\n  ROBOT_NEXT_LOCATION,\n}\n\nclass ObservableRobot extends Observable<ObservedRobot> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedRobot.ROBOT_LOCATION, []);\n    this.callbacks.set(ObservedRobot.ROBOT_NEXT_LOCATION, []);\n  }\n}\n\nenum ObservedAmount {\n  FOOS_AMOUNT,\n  BARS_AMOUNT,\n  FOOBARS_AMOUNT,\n  ROBOTS_AMOUNT,\n}\n\nclass ObservableStore extends Observable<ObservedAmount> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedAmount.FOOS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.BARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.FOOBARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.ROBOTS_AMOUNT, []);\n  }\n}\n\nexport {\n  Observable,\n  ObservableRobot,\n  ObservedRobot,\n  ObservableStore,\n  ObservedAmount,\n};\n","import {\n  Action,\n  ASSEMBLING,\n  ASSEMBLING_NEEDED_RESSOURCES,\n  BUYING_ROBOT,\n  BUYING_ROBOT_NEEDED_RESSOURCES,\n  MINING_BAR,\n  MINING_FOO,\n  MOVING,\n  NeededRessources,\n  WAITING,\n} from \"./actions\";\nimport { ObservableRobot, ObservedRobot } from \"./Observable\";\nimport { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Store } from \"./Store\";\n\nenum Location {\n  FOO_MINE = \"foo mine\",\n  BAR_MINE = \"bar mine\",\n  ASSEMBLING_FACTORY = \"assembling factory\",\n  SHOP = \"shop\",\n  TRANSITION = \"transition\",\n}\n\ntype RobotOptions = {\n  randomGenerator?: RandomGenerator;\n  initialLocation?: Location;\n};\n\n/**\n * The robot is the main character. It does nothing by itself except\n * finishing the execution of the actions it was asked to start.\n * To make it finish its actions, it needs to get regularly its method\n * tick() called with the current time.\n */\nclass Robot {\n  private location: Location;\n  private action: Action;\n  private randomGenerator: RandomGenerator;\n  private nextLocation: Location | null;\n  private actionStartTime: number | null;\n  private keepLocation;\n  private observable: ObservableRobot;\n  private previousLocation: Location;\n  private previousAction: Action;\n\n  constructor(private store: Store, options?: RobotOptions) {\n    this.keepLocation = false;\n    this.action = WAITING;\n    this.previousAction = WAITING;\n    this.actionStartTime = null;\n    this.observable = store.getRobotsObservable();\n    this.store.addRobot(this);\n    this.nextLocation = null;\n    this.setNextLocation(this.nextLocation);\n    this.location = Location.SHOP;\n    this.setLocation(\n      options?.initialLocation ? options.initialLocation : Location.SHOP\n    );\n    this.previousLocation = Location.SHOP;\n    this.randomGenerator = options?.randomGenerator\n      ? options?.randomGenerator\n      : new RealRandomGenerator();\n  }\n\n  /**\n   * If the current action duration has been reached, ends the\n   * action to make the robot available again, and executes its\n   * consequences.\n   * @param currentTime the current time in miliseconds.\n   */\n  tick(currentTime: number) {\n    if (this.actionStartTime !== null) {\n      const actionCurrentDuration = currentTime - this.actionStartTime;\n      let actionTotalDuration: number;\n      if (\"randomBetween\" in this.action) {\n        actionTotalDuration = this.randomGenerator.randomBetweenTwoValues(\n          ...this.action.randomBetween\n        );\n      } else {\n        actionTotalDuration = this.action.totalDuration;\n      }\n      if (actionCurrentDuration >= actionTotalDuration) {\n        this._endAction();\n      }\n    }\n  }\n\n  _endAction() {\n    switch (this.action.actionType) {\n      case MOVING.actionType: {\n        if (this.nextLocation) {\n          this._moveTo(this.nextLocation);\n        } else {\n          throw new Error(\n            \"The robot can't end its move without a location specified.\"\n          );\n        }\n        break;\n      }\n      case MINING_FOO.actionType: {\n        this._mineFoo();\n        break;\n      }\n      case MINING_BAR.actionType: {\n        this._mineBar();\n        break;\n      }\n      case ASSEMBLING.actionType: {\n        this._assemble();\n        break;\n      }\n      case BUYING_ROBOT.actionType: {\n        this._buyRobot();\n        break;\n      }\n      default: {\n        throw new Error(\n          `There is a start time defined for an action, but the action of the robot is incorrect (${this.action.actionType}).`\n        );\n      }\n    }\n    this.setAction(WAITING);\n    this.actionStartTime = null;\n  }\n\n  private _moveTo(location: Location) {\n    this.setLocation(location);\n    this.setNextLocation(null);\n  }\n\n  private _mineFoo() {\n    this.store.setFoosAmount(this.store.getFoosAmount() + 1);\n  }\n\n  private _mineBar() {\n    this.store.setBarsAmount(this.store.getBarsAmount() + 1);\n  }\n\n  private _assemble() {\n    const isAssemblingSuccessful =\n      this.randomGenerator.randomPercentageSuccess(60);\n    if (isAssemblingSuccessful) {\n      this.store.setFoobarsAmount(this.store.getFoobarsAmount() + 1);\n    } else {\n      this.store.setBarsAmount(this.store.getBarsAmount() + 1);\n    }\n  }\n\n  private _buyRobot() {\n    new Robot(this.store);\n  }\n\n  startMoving(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocationSpecified();\n    this._checkNotKeepingLocation();\n    this.setLocation(Location.TRANSITION);\n    this.setAction(MOVING);\n    this.actionStartTime = currentTime;\n  }\n\n  startMining(currentTime: number) {\n    this.checkAvailable();\n    if (this.location === Location.FOO_MINE) {\n      this.setAction(MINING_FOO);\n    } else if (this.location === Location.BAR_MINE) {\n      this.setAction(MINING_BAR);\n    } else {\n      throw new Error(\n        `The robot has to be in a mine to mine, here it is in ${this.location}.`\n      );\n    }\n    this.actionStartTime = currentTime;\n  }\n\n  startAssembling(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocation(Location.ASSEMBLING_FACTORY);\n    this._checkRessources(\n      \"To create a foobar the robot needs one foo and one bar\",\n      ASSEMBLING_NEEDED_RESSOURCES\n    );\n\n    this.setAction(ASSEMBLING);\n    this.actionStartTime = currentTime;\n    this.store.setBarsAmount(this.store.getBarsAmount() - 1);\n    this.store.setFoosAmount(this.store.getFoosAmount() - 1);\n  }\n\n  startBuyingRobot(currentTime: number) {\n    this.checkAvailable();\n    this._checkLocation(Location.SHOP);\n    this._checkRessources(\n      \"To buy a new robot, the robot needs 6 foos and 3 foobars\",\n      BUYING_ROBOT_NEEDED_RESSOURCES\n    );\n    this.setAction(BUYING_ROBOT);\n    this.actionStartTime = currentTime;\n    this.store.setFoobarsAmount(this.store.getFoobarsAmount() - 3);\n    this.store.setFoosAmount(this.store.getFoosAmount() - 6);\n  }\n\n  private _checkLocation(location: Location) {\n    if (location !== this.location) {\n      throw new Error(\n        `The robot has to be in the ${location}, here it is in ${this.location}.`\n      );\n    }\n  }\n\n  private _checkLocationSpecified() {\n    if (!this.getNextLocation()) {\n      throw new Error(\n        \"The robot can't start moving without next location specified.\"\n      );\n    }\n  }\n\n  private _checkNotKeepingLocation() {\n    if (this.getKeepLocation()) {\n      throw new Error(\n        \"The robot can't start moving while it has been asked to keep its location.\"\n      );\n    }\n  }\n\n  private _checkRessources(\n    errorMessageBeginning: string,\n    neededRessources: NeededRessources\n  ) {\n    const enoughRessources =\n      this.store.getFoobarsAmount() >= neededRessources.foobars &&\n      this.store.getFoosAmount() >= neededRessources.foos &&\n      this.store.getBarsAmount() >= neededRessources.bars;\n    if (!enoughRessources) {\n      throw new Error(\n        `${errorMessageBeginning}.\n        There are only ${this.store.getFoosAmount()} foos, ${this.store.getBarsAmount()} bars and ${this.store.getFoobarsAmount()} foobars.`\n      );\n    }\n  }\n\n  private checkAvailable() {\n    if (!this.isAvailable()) {\n      throw new Error(`The robot is not available yet`);\n    }\n  }\n\n  canAssemble(): boolean {\n    return this._canDoAction(ASSEMBLING_NEEDED_RESSOURCES);\n  }\n\n  canBuyRobot(): boolean {\n    return this._canDoAction(BUYING_ROBOT_NEEDED_RESSOURCES);\n  }\n\n  private _canDoAction(neededRessources: NeededRessources) {\n    try {\n      this._checkRessources(\"\", neededRessources);\n    } catch {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * State the availability of the robot. A new action can't be started\n   * without the robot being available.\n   */\n  isAvailable(): boolean {\n    return this.action === WAITING;\n  }\n\n  subscribe(information: ObservedRobot, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  /**\n   * Set the next location where starting to move will lead.\n   * A movement can't be started without that location set.\n   */\n  setNextLocation(location: Location | null) {\n    this.nextLocation = location;\n    const nextLocations: (Location | null)[] = [];\n    this.store.getRobots().forEach((robot) => {\n      nextLocations.push(robot.getNextLocation());\n    });\n    this.observable.trigger(ObservedRobot.ROBOT_NEXT_LOCATION, nextLocations);\n  }\n\n  getNextLocation(): Location | null {\n    return this.nextLocation;\n  }\n\n  getLocation() {\n    return this.location;\n  }\n\n  setLocation(location: Location) {\n    this.previousLocation = this.location;\n    this.location = location;\n    const locations: Location[] = [];\n    this.store.getRobots().forEach((robot) => {\n      locations.push(robot.getLocation());\n    });\n    this.observable.trigger(ObservedRobot.ROBOT_LOCATION, locations);\n  }\n\n  getAction() {\n    return this.action;\n  }\n\n  setAction(action: Action) {\n    this.previousAction = this.action;\n    this.action = action;\n  }\n\n  getPreviousAction() {\n    return this.previousAction;\n  }\n\n  setKeepLocation(keepLocation: boolean) {\n    this.keepLocation = keepLocation;\n  }\n\n  getKeepLocation() {\n    return this.keepLocation;\n  }\n\n  getPreviousLocation() {\n    return this.previousLocation;\n  }\n}\n\nexport { Robot, Location, ObservedRobot };\n","type WeightedValues<T> = Map<T, number>;\n\ninterface RandomGenerator {\n  /**\n   * Compute a boolean according to a given percentage.\n   * @param percentage the percentage of chances to be true\n   *     (value between 0 and 100).\n   */\n  randomPercentageSuccess(percentage: number): boolean;\n\n  /**\n   * Compute a value between two given values\n   */\n  randomBetweenTwoValues(min: number, max: number): number;\n\n  /**\n   * Choose randomly one of the provided values, according to\n   * the given weights for each value.\n   * If the weight is 0, the value will never be chosen, if it\n   * is a positive number, the bigger it will be compared to\n   * the weight of the other values, the more chances it will\n   * have to be chosen.\n   * @param values the chosen value.\n   */\n  chooseValue<T>(values: WeightedValues<T>): T;\n}\n\nclass RealRandomGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    if (percentage < 0 || percentage > 100) {\n      throw new Error(\n        `The given percentage has to be between 0 and 100, not ${percentage}.`\n      );\n    }\n    const random = Math.random() * 100;\n    if (random < percentage) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    const value = min + Math.random() * (max - min);\n    return value;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    this._checkWeights(values);\n    const weightsSum = Array.from(values.values()).reduce((a, b) => a + b);\n    const random = Math.random() * weightsSum;\n    let chosenValue: T = values.entries().next().value;\n    let sum = 0;\n    for (let [key, value] of values) {\n      sum += value;\n      if (random <= sum) {\n        chosenValue = key;\n        break;\n      }\n    }\n    return chosenValue;\n  }\n\n  private _checkWeights<T>(values: WeightedValues<T>) {\n    const weights = Array.from(values.values());\n    const negativeWeight = weights.some((x) => x < 0);\n    if (negativeWeight) {\n      const entries = Array.from(values.entries());\n      throw new Error(`Negative weights are not allowed. Entries: ${entries}`);\n    }\n    const onlyZeroWeights = weights.every((x) => x === 0);\n    if (onlyZeroWeights) {\n      const entries = Array.from(values.entries());\n      throw new Error(\n        `At least one of the weights has to be > 0. Entries: ${entries}`\n      );\n    }\n  }\n}\n\n/**\n * Fake generator always returning true or the maximal value,\n * used for tests.\n */\nclass SuccessGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return true;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return max;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const biggestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] > v2[1] ? v1 : v2\n    );\n    return biggestPair[0];\n  }\n}\n\n/**\n * Fake generator always returning false or the minimal value,\n * used for tests.\n */\nclass FailureGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return false;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return min;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const smallestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] < v2[1] ? v1 : v2\n    );\n    return smallestPair[0];\n  }\n}\n\nexport { RealRandomGenerator, SuccessGenerator, FailureGenerator };\nexport type { RandomGenerator, WeightedValues };\n","import {\n  ObservableRobot,\n  ObservableStore,\n  ObservedAmount,\n  ObservedRobot,\n} from \"./Observable\";\nimport { Robot } from \"./Robot\";\n\nclass Store {\n  private foosAmount: number;\n  private barsAmount: number;\n  private fooBarsAmount: number;\n  private robots: Robot[];\n  private observable: ObservableStore;\n  private robotsObservable: ObservableRobot;\n\n  constructor() {\n    this.observable = new ObservableStore();\n    this.robotsObservable = new ObservableRobot();\n    this.foosAmount = 0;\n    this.barsAmount = 0;\n    this.fooBarsAmount = 0;\n    this.robots = [];\n  }\n\n  subscribe(information: ObservedAmount, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.robotsObservable.subscribe(information, callback);\n  }\n\n  setFoosAmount(amount: number) {\n    this.foosAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOS_AMOUNT, this.foosAmount);\n  }\n\n  getFoosAmount() {\n    return this.foosAmount;\n  }\n\n  setBarsAmount(amount: number) {\n    this.barsAmount = amount;\n    this.observable.trigger(ObservedAmount.BARS_AMOUNT, this.barsAmount);\n  }\n\n  getBarsAmount() {\n    return this.barsAmount;\n  }\n\n  setFoobarsAmount(amount: number) {\n    this.fooBarsAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOBARS_AMOUNT, this.fooBarsAmount);\n  }\n\n  getFoobarsAmount() {\n    return this.fooBarsAmount;\n  }\n\n  addRobot(robot: Robot) {\n    this.robots.push(robot);\n    this.observable.trigger(ObservedAmount.ROBOTS_AMOUNT, this.robots.length);\n  }\n\n  getRobots() {\n    return this.robots;\n  }\n\n  getRobotsObservable() {\n    return this.robotsObservable;\n  }\n}\n\nexport { Store, ObservedAmount, ObservedRobot };\n","import { DateTime, RealDateTime } from \"./DateTime\";\nimport { ObservedAmount, ObservedRobot } from \"./Observable\";\nimport { Location, Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\nimport { Strategy } from \"./Strategy\";\n\nconst MAX_ROBOTS = 20;\n\ntype GameOptions = {\n  dateTime?: DateTime;\n};\nclass Game {\n  public store: Store;\n  private dateTime: DateTime;\n  private started: boolean;\n  private startTime: number | null;\n\n  constructor(private strategy: Strategy, options?: GameOptions) {\n    this.store = new Store();\n    this.dateTime = options?.dateTime ? options.dateTime : new RealDateTime();\n    new Robot(this.store);\n    new Robot(this.store);\n    this.started = false;\n    this.startTime = null;\n  }\n\n  start() {\n    this.started = true;\n    this.startTime = this.dateTime.getCurrentTime();\n    let requestId = 0;\n    const nextFrame = () => {\n      const now = this.dateTime.getCurrentTime();\n      this.strategy.actOnOneFrame(now, this.store);\n      if (this.started && this.store.getRobots().length < MAX_ROBOTS) {\n        requestId = requestAnimationFrame(nextFrame);\n      } else {\n        cancelAnimationFrame(requestId);\n        this.started = false;\n        this.startTime = null;\n      }\n    };\n    nextFrame();\n  }\n\n  stop() {\n    this.started = false;\n    this.startTime = null;\n  }\n\n  getStartTime() {\n    return this.startTime;\n  }\n\n  getStarted(): boolean {\n    return this.started;\n  }\n\n  getCurrentTime() {\n    if (this.started) {\n      return this.dateTime.getCurrentTime();\n    } else {\n      throw new Error(\"The game is not started\");\n    }\n  }\n\n  getStrategy(): Strategy {\n    return this.strategy;\n  }\n\n  setRobotNextLocation(id: number, location: Location) {\n    this.store.getRobots()[id].setNextLocation(location);\n  }\n\n  getRobotLocation(id: number): Location {\n    return this.store.getRobots()[id].getLocation();\n  }\n\n  subscribeToAmount(information: ObservedAmount, callback: Function) {\n    this.store.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.store.subscribeToRobots(information, callback);\n  }\n}\nexport { Game, MAX_ROBOTS };\n","import { MOVING, WAITING } from \"./actions\";\nimport { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Location, Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\ninterface Strategy {\n  actOnOneFrame(currentTime: number, store: Store): void;\n}\n\ntype BasicStrategyOptions = {\n  randomGenerator?: RandomGenerator;\n};\n\n/**\n * Implements a basic strategy:\n * With a manual part taking priority:\n * - does not move robots that have been manually told to keep location.\n * - moves robots to the indicated manual location if there is one.\n * And an automatic part:\n * - chooses randomly to make an available robot move to a random\n *   location, or instead do an action if possible.\n * - the random aspect of moving or not, and where to move can be\n *   influenced manually.\n */\nclass BasicStrategy implements Strategy {\n  private randomGenerator: RandomGenerator;\n  private automaticMovementProbability: number;\n  private automaticLocationProbabilities: Map<Location, number>;\n\n  constructor(options?: BasicStrategyOptions) {\n    this.randomGenerator = options?.randomGenerator\n      ? options.randomGenerator\n      : new RealRandomGenerator();\n    this.automaticMovementProbability = 50;\n    this.automaticLocationProbabilities = new Map([\n      [Location.FOO_MINE, 50],\n      [Location.BAR_MINE, 50],\n      [Location.ASSEMBLING_FACTORY, 50],\n      [Location.SHOP, 50],\n    ]);\n  }\n\n  /**\n   * This influences the probability to choose automatically one\n   * location instead of another.\n   * @param location the location to influence.\n   * @param weight the heigher the value relatively to others, the\n   *   more chances to go there.\n   */\n  setLocationWeight(location: Location, weight: number) {\n    if (weight < 0) {\n      throw new Error(\n        `The assigned weight ${weight} has to be greater than 0.`\n      );\n    }\n    this.automaticLocationProbabilities.set(location, weight);\n  }\n\n  getLocationWeight(location: Location) {\n    return this.automaticLocationProbabilities.get(location);\n  }\n\n  /**\n   * The percentage of chances to get an automatic move each time.\n   */\n  setAutomaticMovementProbability(probability: number) {\n    this.automaticMovementProbability = probability;\n  }\n\n  getAutomaticMovementProbability() {\n    return this.automaticMovementProbability;\n  }\n\n  /**\n   * Do some action on the content of the store, including robots.\n   * This function is called by the game several times per second.\n   * @param currentTime the time where the function is called.\n   */\n  actOnOneFrame(currentTime: number, store: Store) {\n    store.getRobots().forEach((robot) => {\n      robot.tick(currentTime);\n      if (robot.isAvailable()) {\n        const shouldDoManualMove =\n          robot.getNextLocation() && !robot.getKeepLocation();\n        if (shouldDoManualMove) {\n          robot.startMoving(currentTime);\n        } else {\n          this._handleAutomaticActions(robot, currentTime);\n        }\n      }\n    });\n  }\n\n  private _handleAutomaticActions(robot: Robot, currentTime: number) {\n    const hasJustMoved = robot.getPreviousAction() === MOVING;\n    const shouldAutomaticallyMove =\n      this.randomGenerator.randomPercentageSuccess(\n        this.automaticMovementProbability\n      ) &&\n      !robot.getKeepLocation() &&\n      !hasJustMoved;\n    if (shouldAutomaticallyMove) {\n      this._doAutomaticMove(robot, currentTime);\n    } else {\n      this._doAutomaticOtherActions(robot, currentTime);\n    }\n  }\n\n  private _doAutomaticMove(robot: Robot, currentTime: number) {\n    const possibleLocations = new Map(this.automaticLocationProbabilities);\n    possibleLocations.delete(robot.getLocation());\n    try {\n      const chosenLocation =\n        this.randomGenerator.chooseValue(possibleLocations);\n      robot.setNextLocation(chosenLocation);\n      robot.startMoving(currentTime);\n    } catch (exception) {\n      if (\n        exception.message.includes(\"At least one of the weights has to be > 0\")\n      ) {\n        // in case of wrong weights (eg. (0, 0, 0)), we just don't move\n      } else {\n        throw exception;\n      }\n    }\n  }\n\n  private _doAutomaticOtherActions(robot: Robot, currentTime: number) {\n    switch (robot.getLocation()) {\n      case Location.FOO_MINE:\n      case Location.BAR_MINE:\n        robot.startMining(currentTime);\n        break;\n      case Location.ASSEMBLING_FACTORY:\n        if (robot.canAssemble()) {\n          robot.startAssembling(currentTime);\n        } else {\n          robot.setAction(WAITING);\n          robot.setLocation(robot.getLocation());\n        }\n        break;\n      case Location.SHOP:\n        if (robot.canBuyRobot()) {\n          robot.startBuyingRobot(currentTime);\n        } else {\n          robot.setAction(WAITING);\n          robot.setLocation(robot.getLocation());\n        }\n        break;\n      default:\n        throw new Error(\n          `An action has been requested while the robot was the wrong location (${robot.getLocation()}).`\n        );\n    }\n  }\n}\n\nexport { BasicStrategy };\nexport type { Strategy };\n","import React from \"react\";\nimport { BasicStrategy, Game } from \"../../domain\";\n\nconst GameContext = React.createContext<Game>(new Game(new BasicStrategy()));\n\nexport default GameContext;\n","import styled from \"@emotion/styled\";\nimport { useContext, useEffect, useState } from \"react\";\nimport GameContext from \"../../contexts/game\";\n\nconst Span = styled.span`\n  font-size: 1.6rem;\n  padding: 0.5rem 0;\n\n  @media (min-width: 600px) {\n    font-size: 1.7rem;\n  }\n  @media (min-width: 950px) {\n    font-size: 1.8rem;\n  }\n`;\n\n/**\n * Count the current time according to the game internal date time.\n * The counter freezes when the game is finished.\n * This value is updated every 0.1 seconds, which is enough to show\n * animated seconds.\n */\nfunction Counter() {\n  const game = useContext(GameContext);\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (game.getStarted()) {\n        try {\n          setTime(game.getCurrentTime());\n        } catch {\n          clearInterval(interval);\n        }\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [game]);\n\n  function formatDate(time: number) {\n    const startTime = game.getStartTime();\n    if (startTime) {\n      const date = new Date(time - startTime);\n      const min = formatNumber(date.getMinutes());\n      const sec = formatNumber(date.getSeconds());\n      return `${min}:${sec}`;\n    } else {\n      return \"00:00\";\n    }\n  }\n  function formatNumber(number: number) {\n    return number < 10 ? \"0\" + number : \"\" + number;\n  }\n\n  return <Span>{formatDate(time)}</Span>;\n}\n\nexport default Counter;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst liStyle = css`\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0;\n`;\n\ntype LiProps = {\n  first?: boolean;\n};\n\nconst Li = styled.li<LiProps>`\n  ${liStyle}\n  ${({ first }) =>\n    first\n      ? `margin-bottom: 2rem;\n        @media (min-width: 950px) {\n          margin-bottom: 0;\n          grid-column: span 2;\n          width: 60%;\n          justify-self: center;\n        }`\n      : \"\"}\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    '& .MuiSlider-markLabel[data-index=\"0\"]': {\n      transform: \"translateX(0%)\",\n    },\n    '& .MuiSlider-markLabel[data-index=\"1\"]': {\n      transform: \"translateX(-100%)\",\n    },\n  },\n});\n\nconst percentageMarks = [\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 100,\n    label: \"100%\",\n  },\n];\n\ntype SliderCommandProps = {\n  id: string;\n  text: string;\n  defaultValue: number | undefined;\n  onChange: (event: object, value: number | number[]) => void;\n  first?: boolean;\n};\n\nfunction SliderCommand({\n  id,\n  text,\n  defaultValue,\n  onChange,\n  first,\n}: SliderCommandProps) {\n  const classes = useStyles();\n  return (\n    <Li first={first}>\n      <label id={id}>{text}</label>\n      <Slider\n        defaultValue={defaultValue}\n        valueLabelDisplay=\"auto\"\n        onChangeCommitted={onChange}\n        aria-labelledby={id}\n        marks={first && percentageMarks}\n        className={classes.root}\n      />\n    </Li>\n  );\n}\n\nexport default SliderCommand;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { BasicStrategy, Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport SliderCommand from \"./SliderCommand\";\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  padding-top: 2rem;\n  border-top: solid 1px #ddd;\n  display: grid;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n    border: none;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1.3fr 1fr 1fr;\n    column-gap: 5%;\n  }\n`;\n\n/**\n * Provide slider commands to control the game automatic mode\n * by influencing the random actions.\n */\nfunction ProbabilityCommands() {\n  const game = useContext(GameContext);\n  const strategy = game.getStrategy() as BasicStrategy;\n  function handleMovementProbabilityChange(\n    _: object,\n    value: number | number[]\n  ) {\n    strategy.setAutomaticMovementProbability(value as number);\n  }\n  function createLocationWeightChangeHandler(location: Location) {\n    return function handleLocationWeightChange(\n      _: object,\n      value: number | number[]\n    ) {\n      strategy.setLocationWeight(location, value as number);\n    };\n  }\n  return (\n    <List>\n      <SliderCommand\n        id=\"movement-probability\"\n        text=\"Probability to move\"\n        defaultValue={strategy.getAutomaticMovementProbability()}\n        onChange={handleMovementProbabilityChange}\n        first={true}\n      />\n      <SliderCommand\n        id=\"foo-mine-weight\"\n        text=\"Foo mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.FOO_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.FOO_MINE)}\n      />\n      <SliderCommand\n        id=\"bar-mine-weight\"\n        text=\"Bar mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.BAR_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.BAR_MINE)}\n      />\n      <SliderCommand\n        id=\"assembling-factory-weight\"\n        text=\"Assembling factory weight\"\n        defaultValue={strategy.getLocationWeight(Location.ASSEMBLING_FACTORY)}\n        onChange={createLocationWeightChangeHandler(\n          Location.ASSEMBLING_FACTORY\n        )}\n      />\n      <SliderCommand\n        id=\"shop-weight\"\n        text=\"Shop weight\"\n        defaultValue={strategy.getLocationWeight(Location.SHOP)}\n        onChange={createLocationWeightChangeHandler(Location.SHOP)}\n      />\n    </List>\n  );\n}\n\nexport default ProbabilityCommands;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\n\n// these factors mulpitply the arrows' size for smaller viewports\nconst SMALL_RESPONSIVE_FACTOR = 1.6;\nconst MEDIUM_RESPONSIVE_FACTOR = 1.3;\n\ntype ArrowContainerProps = {\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n  size: number;\n  rotate: number;\n  children: React.ReactNode;\n};\n\ntype SpecificArrowProps = {\n  size: number;\n  value: number;\n};\n\nfunction FooArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer top={5} left={30} rotate={170} size={size}>\n      <ArrowValue value={value} top={1.5} right={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction BarArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer top={5} right={30} rotate={300} size={size}>\n      <ArrowValue value={value} top={1.5} left={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction FactoryArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer bottom={5} left={30} rotate={120} size={size}>\n      <ArrowValue value={value} bottom={1.5} right={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction ShopArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer bottom={5} right={30} rotate={350} size={size}>\n      <ArrowValue value={value} bottom={1.5} left={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction ArrowContainer({\n  top,\n  bottom,\n  left,\n  right,\n  size,\n  rotate,\n  children,\n}: ArrowContainerProps) {\n  function buildRules(size: number) {\n    return `${top ? buildVerticalPositionRule(\"top\", top, size) : \"\"}\n        ${bottom ? buildVerticalPositionRule(\"bottom\", bottom, size) : \"\"}\n        ${left ? buildHorizontalPositionRule(\"left\", left, size) : \"\"}\n        ${right ? buildHorizontalPositionRule(\"right\", right, size) : \"\"}\n        `;\n  }\n  function buildVerticalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: calc(${position}rem - calc(${size}rem / 2));`;\n  }\n  function buildHorizontalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: calc(${position}% - calc(${size}rem / 2));`;\n  }\n  return (\n    <div\n      css={css`\n        transition: all 0.3s ease;\n        transition-property: top, bottom, left, right;\n        position: absolute;\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      <Arrow rotate={rotate} size={size} />\n      {children}\n    </div>\n  );\n}\n\ntype ArrowProps = {\n  rotate: number;\n  size: number;\n};\n\nfunction Arrow({ rotate, size }: ArrowProps) {\n  return (\n    // SVG Arrow by Daria Szymonowicz from the Noun Project\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      css={css`\n        transition: all 0.3s ease;\n        transition-property: width, height;\n        transform: rotate(${rotate}deg);\n        width: ${size / SMALL_RESPONSIVE_FACTOR}rem;\n        height: ${size / SMALL_RESPONSIVE_FACTOR}rem;\n\n        @media (min-width: 450px) {\n          width: ${size / MEDIUM_RESPONSIVE_FACTOR}rem;\n          height: ${size / MEDIUM_RESPONSIVE_FACTOR}rem;\n        }\n        @media (min-width: 600px) {\n          width: ${size}rem;\n          height: ${size}rem;\n        }\n      `}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox=\"0 0 100 100\"\n    >\n      <g>\n        <path d=\"M84.68,75.29l-13.78-31L64,53.77c-2.89-1.86-5.92-3.51-8.87-5.28L42.23,40.37C33.55,35,24.81,29.77,15.93,24.71l-.61.83c7.56,6.88,15.26,13.56,23,20.17l11.72,9.8c2.6,2.25,5.11,4.63,7.77,6.8L51,71.75Z\" />\n      </g>\n    </svg>\n  );\n}\n\ntype ArrowValueProps = {\n  value: number;\n  size: number;\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n};\n\nfunction ArrowValue({\n  value,\n  size,\n  top,\n  bottom,\n  left,\n  right,\n}: ArrowValueProps) {\n  const fontSizeFactor = 4.4;\n  const horizontalPositionFactor = 5;\n  const verticalPositionFactor = 7;\n  function buildRules(size: number) {\n    return `${top ? buildVerticalPositionRule(\"top\", top, size) : \"\"}\n        ${bottom ? buildVerticalPositionRule(\"bottom\", bottom, size) : \"\"}\n        ${left ? buildHorizontalPositionRule(\"left\", left, size) : \"\"}\n        ${right ? buildHorizontalPositionRule(\"right\", right, size) : \"\"}\n        font-size: ${size / fontSizeFactor}rem;\n        `;\n  }\n  function buildVerticalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: ${(position * size) / verticalPositionFactor}rem;`;\n  }\n  function buildHorizontalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: ${\n      (position * size) / horizontalPositionFactor\n    }rem;`;\n  }\n  return (\n    <span\n      css={css`\n        position: absolute;\n        transition: all 0.3s ease;\n        transition-property: font-size, top, bottom, left, right;\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {value}\n    </span>\n  );\n}\n\nexport { FooArrow, BarArrow, FactoryArrow, ShopArrow };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\n\n// these factors mulpitply the circles' size for smaller viewports\nconst SMALL_RESPONSIVE_FACTOR = 1.6;\nconst MEDIUM_RESPONSIVE_FACTOR = 1.3;\nconst FONT_FACTOR = 1.5;\n\ntype CircleProps = {\n  size: number;\n  positions: string;\n  children: React.ReactNode;\n};\n\ntype SpecificCircleProps = {\n  size: number;\n  children: React.ReactNode;\n};\n\nconst circle = css`\n  position: absolute;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  transition-property: width, height, top, left, font-size;\n  background-color: #333;\n  color: #eee;\n  display: grid;\n  place-content: center;\n`;\n\nfunction FooCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"top: 0; left: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction BarCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"top: 0; right: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction FactoryCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"bottom: 0; left: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction ShopCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"bottom: 0; right: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction Circle({ size, positions, children }: CircleProps) {\n  function buildRules(size: number) {\n    return `width: ${size}rem;\n        height: ${size}rem;\n        font-size: ${size / FONT_FACTOR}rem;\n        `;\n  }\n  return (\n    <div\n      css={css`\n        ${circle}\n        ${positions}\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction MovingCircle({ size, children }: SpecificCircleProps) {\n  function buildRules(size: number) {\n    return `top: calc(50% - calc(${size}rem / 2));\n        left: calc(50% - calc(${size}rem / 2));\n        width: ${size}rem;\n        height: ${size}rem;\n        font-size: ${size / FONT_FACTOR}rem;\n        `;\n  }\n  return (\n    <div\n      css={css`\n        ${circle}\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport { FooCircle, BarCircle, FactoryCircle, ShopCircle, MovingCircle };\n","class IncrementableMap<T> extends Map<T, number> {\n  increment(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) + 1);\n  }\n  decrement(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) - 1);\n  }\n}\n\nexport { IncrementableMap };\n","import { useEffect, useState } from \"react\";\nimport { Game, ObservedAmount, ObservedRobot } from \"../../domain\";\n\n/**\n * These hooks create observer states, subscribing to the game\n * observable API.\n */\n\ninterface UseGameStateProps<T> {\n  game: Game;\n  initialValue: T;\n}\n\ninterface UseStoreStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedAmount;\n}\n\ninterface UseRobotStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedRobot;\n}\n\nfunction useStoreState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseStoreStateProps<T>) {\n  const [storeState, setStoreState] = useState<T>(initialValue);\n  useEffect(\n    function observeStore() {\n      game.subscribeToAmount(observed, setStoreState);\n    },\n    [game, observed]\n  );\n  return storeState;\n}\n\nfunction useRobotState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseRobotStateProps<T>) {\n  const [robotState, setRobotState] = useState<T>(initialValue);\n  useEffect(\n    function observeRobot() {\n      game.subscribeToRobots(observed, setRobotState);\n    },\n    [game, observed]\n  );\n  return robotState;\n}\n\nexport { useStoreState, useRobotState };\n","import { useMemo } from \"react\";\nimport { Game, Location, ObservedRobot } from \"../../../domain\";\nimport { IncrementableMap } from \"../../../utils\";\nimport { useRobotState } from \"../../hooks/useGameState\";\n\n/**\n * Build and return a Map associating locations with the number\n * of robots on that location.\n */\nfunction useRobotsAmountByLocation(game: Game) {\n  const { robotsValues } = useRobotsValue<Location>({\n    game,\n    observedType: ObservedRobot.ROBOT_LOCATION,\n    mapInitialValue: [\n      [Location.FOO_MINE, 0],\n      [Location.BAR_MINE, 0],\n      [Location.ASSEMBLING_FACTORY, 0],\n      [Location.SHOP, 0],\n      [Location.TRANSITION, 0],\n    ],\n  });\n  return { robotsAmountByLocation: robotsValues };\n}\n\n/**\n * Build and return a Map associating locations with the number\n * of robots that are currently moving to that location.\n */\nfunction useRobotsAmountByNextLocation(game: Game) {\n  const { robotsValues } = useRobotsValue<Location | null>({\n    game,\n    observedType: ObservedRobot.ROBOT_NEXT_LOCATION,\n    mapInitialValue: [\n      [Location.FOO_MINE, 0],\n      [Location.BAR_MINE, 0],\n      [Location.ASSEMBLING_FACTORY, 0],\n      [Location.SHOP, 0],\n    ],\n  });\n  return { robotsAmountByNextLocation: robotsValues };\n}\n\ntype RobotsValueProps<T> = {\n  game: Game;\n  observedType: ObservedRobot;\n  mapInitialValue: [T, any][];\n};\n\nfunction useRobotsValue<T>({\n  game,\n  observedType,\n  mapInitialValue,\n}: RobotsValueProps<T>) {\n  const robotsNextLocation = useRobotState<T[]>({\n    game,\n    initialValue: [],\n    observed: observedType,\n  });\n\n  const robotsValues = useMemo(() => {\n    let locations = new IncrementableMap<T>(mapInitialValue);\n    robotsNextLocation.forEach((location) => {\n      locations.increment(location);\n    });\n    return locations;\n  }, [robotsNextLocation, mapInitialValue]);\n\n  return { robotsValues };\n}\n\nexport { useRobotsAmountByLocation, useRobotsAmountByNextLocation };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { BarArrow, FactoryArrow, FooArrow, ShopArrow } from \"./arrows\";\nimport {\n  BarCircle,\n  FactoryCircle,\n  FooCircle,\n  MovingCircle,\n  ShopCircle,\n} from \"./circles\";\nimport {\n  useRobotsAmountByLocation,\n  useRobotsAmountByNextLocation,\n} from \"./useRobotsAmountByLocation\";\n\nconst MainSquare = styled.ul`\n  height: 15rem;\n  position: relative;\n  margin: 3rem 0 3.7rem 0;\n  list-style-type: none;\n  padding: 0;\n\n  @media (min-width: 950px) {\n    flex: 1.35;\n    height: 17rem;\n  }\n`;\n\nconst label = css`\n  position: absolute;\n  font-weight: bold;\n  padding: 0.2rem 0;\n  font-size: 1rem;\n\n  @media (min-width: 400px) {\n    font-size: 1.05rem;\n  }\n  @media (min-width: 600px) {\n    font-size: 1.13rem;\n  }\n`;\nconst FooLabel = styled.span`\n  ${label}\n  top: -2.1rem;\n  left: 0;\n`;\nconst BarLabel = styled.span`\n  ${label}\n  top: -2.1rem;\n  right: 0;\n`;\nconst FactoryLabel = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  left: 0;\n`;\nconst ShopLabel = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  right: 0;\n`;\nconst MovingLabel = styled.span`\n  ${label}\n  transition: all 0.3s ease;\n  transition-property: top, left;\n  color: black;\n  bottom: -2rem;\n  left: calc(50% - 2rem);\n`;\n\n/**\n * Display a high level graphical view of robots current and next locations.\n */\nfunction RobotsLocations() {\n  const game = useContext(GameContext);\n  const { robotsAmountByLocation } = useRobotsAmountByLocation(game);\n  const { robotsAmountByNextLocation } = useRobotsAmountByNextLocation(game);\n  const totalRobotsAmount = game.store.getRobots().length;\n  const totalRobotsWithNextLocation = game.store\n    .getRobots()\n    .reduce(function amountWithNextLocation(accumulator, robot) {\n      return robot.getNextLocation() ? accumulator + 1 : accumulator;\n    }, 0);\n  const circleSizeFactor = 7;\n  const arrowSizeFactor = 8;\n  function computeCircleSize(location: Location) {\n    const robotsInlocation = robotsAmountByLocation.get(location);\n    /* With the square root division the circle sizes increase in a\n       softer way: a circle with 1 robot will be 3.9 times smaller\n       than a circle with 15 robots, instead of 15 times smaller. */\n    return totalRobotsAmount && robotsInlocation\n      ? (Math.sqrt(robotsInlocation) / Math.sqrt(totalRobotsAmount)) *\n          circleSizeFactor\n      : 0;\n  }\n  function computeArrowSize(location: Location) {\n    const robotsNextlocation = robotsAmountByNextLocation.get(location);\n    /* For arrow sizes we use the 3rd root instead of the square root\n       to get an even softer change */\n    return totalRobotsWithNextLocation && robotsNextlocation\n      ? (Math.pow(robotsNextlocation, 1 / 3) /\n          Math.pow(totalRobotsWithNextLocation, 1 / 3)) *\n          arrowSizeFactor\n      : 0;\n  }\n  return (\n    <MainSquare>\n      <li>\n        <FooLabel>Foo mine</FooLabel>\n        <FooCircle size={computeCircleSize(Location.FOO_MINE)}>\n          {robotsAmountByLocation.get(Location.FOO_MINE)}\n        </FooCircle>\n        <FooArrow\n          size={computeArrowSize(Location.FOO_MINE)}\n          value={robotsAmountByNextLocation.get(Location.FOO_MINE) as number}\n        />\n      </li>\n      <li>\n        <BarLabel>Bar mine</BarLabel>\n        <BarCircle size={computeCircleSize(Location.BAR_MINE)}>\n          {robotsAmountByLocation.get(Location.BAR_MINE)}\n        </BarCircle>\n        <BarArrow\n          size={computeArrowSize(Location.BAR_MINE)}\n          value={robotsAmountByNextLocation.get(Location.BAR_MINE) as number}\n        />\n      </li>\n      <li>\n        <FactoryLabel>Assembling factory</FactoryLabel>\n        <FactoryCircle size={computeCircleSize(Location.ASSEMBLING_FACTORY)}>\n          {robotsAmountByLocation.get(Location.ASSEMBLING_FACTORY)}\n        </FactoryCircle>\n        <FactoryArrow\n          size={computeArrowSize(Location.ASSEMBLING_FACTORY)}\n          value={\n            robotsAmountByNextLocation.get(\n              Location.ASSEMBLING_FACTORY\n            ) as number\n          }\n        />\n      </li>\n      <li>\n        <ShopLabel>Shop</ShopLabel>\n        <ShopCircle size={computeCircleSize(Location.SHOP)}>\n          {robotsAmountByLocation.get(Location.SHOP)}\n        </ShopCircle>\n        <ShopArrow\n          size={computeArrowSize(Location.SHOP)}\n          value={robotsAmountByNextLocation.get(Location.SHOP) as number}\n        />\n      </li>\n      <li>\n        <MovingCircle size={computeCircleSize(Location.TRANSITION)}>\n          <MovingLabel>Moving</MovingLabel>\n          {robotsAmountByLocation.get(Location.TRANSITION)}\n        </MovingCircle>\n      </li>\n    </MainSquare>\n  );\n}\n\nexport default RobotsLocations;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { MAX_ROBOTS, ObservedAmount } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { useStoreState } from \"../../hooks\";\n\nconst List = styled.ul`\n  display: flex;\n  list-style-type: none;\n  padding: 0;\n  justify-content: space-around;\n  background-color: #eee;\n  border-radius: 0.3rem;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);\n  padding: 0.3rem 0;\n\n  @media (min-width: 950px) {\n    flex: 1;\n    margin-right: 7%;\n    flex-wrap: wrap;\n    border-radius: 0.4rem;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.15);\n  }\n  @media (min-width: 1200px) {\n    margin-right: 6%;\n  }\n`;\nconst Li = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (min-width: 950px) {\n    flex-basis: 50%;\n    justify-content: center;\n  }\n`;\n\nconst Label = styled.span`\n  font-weight: bold;\n  padding: 0.2rem 0.4rem;\n\n  @media (min-width: 950px) {\n    margin-bottom: 0.3rem;\n  }\n`;\nconst Value = styled.span`\n  padding: 0.2rem 0.4rem;\n  font-size: 1.1rem;\n\n  @media (min-width: 500px) {\n    font-size: 1.4rem;\n  }\n  @media (min-width: 950px) {\n    padding-top: 0.3rem;\n    font-size: 1.7rem;\n  }\n`;\n\n/**\n * Display statistics on what is available in the game store.\n */\nfunction Statistics() {\n  const game = useContext(GameContext);\n  const foosAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoosAmount(),\n    observed: ObservedAmount.FOOS_AMOUNT,\n  });\n  const barsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getBarsAmount(),\n    observed: ObservedAmount.BARS_AMOUNT,\n  });\n  const foobarsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoobarsAmount(),\n    observed: ObservedAmount.FOOBARS_AMOUNT,\n  });\n  const robotsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getRobots().length,\n    observed: ObservedAmount.ROBOTS_AMOUNT,\n  });\n  return (\n    <List>\n      <Li>\n        <Label>Foos</Label>\n        <Value>{foosAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Bars</Label>\n        <Value>{barsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Foobars</Label>\n        <Value>{foobarsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Robots</Label>\n        <Value>\n          {robotsAmount} / {MAX_ROBOTS}\n        </Value>\n      </Li>\n    </List>\n  );\n}\n\nexport default Statistics;\n","import styled from \"@emotion/styled\";\nimport { useEffect, useRef } from \"react\";\nimport { BasicStrategy, Game } from \"../domain\";\nimport { Counter } from \"./components/Counter\";\nimport { ProbabilityCommands } from \"./components/ProbabilityCommands\";\nimport { RobotsLocations } from \"./components/RobotsLocations\";\nimport { Statistics } from \"./components/Statistics\";\nimport GameContext from \"./contexts/game\";\nimport \"./global.css\";\n\nconst Main = styled.main`\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n\n  @media (min-width: 450px) {\n    padding: 1rem 2rem;\n  }\n  @media (min-width: 600px) {\n    padding: 1rem 8%;\n  }\n  @media (min-width: 950px) {\n    padding: 1rem 4rem;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  max-width: 1200px;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 950px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-content: flex-start;\n  }\n`;\n\nconst TitleContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 350px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n  padding: 0.5rem 0;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\n/**\n * The main component holding the whole app.\n */\nfunction Foobartory() {\n  const game = useRef(new Game(new BasicStrategy()));\n  useEffect(() => {\n    game.current.start();\n  }, []);\n  return (\n    <GameContext.Provider value={game.current}>\n      <Main role=\"main\">\n        <Container>\n          <TitleContainer>\n            <Title>Foobartory</Title>\n            <Counter />\n          </TitleContainer>\n          <Statistics />\n          <RobotsLocations />\n          <ProbabilityCommands />\n        </Container>\n      </Main>\n    </GameContext.Provider>\n  );\n}\n\nexport default Foobartory;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Foobartory from \"./ui/Foobartory\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Foobartory />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}