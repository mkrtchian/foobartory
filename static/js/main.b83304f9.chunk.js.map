{"version":3,"sources":["domain/locations.ts","reportWebVitals.ts","domain/DateTime.ts","domain/actions.ts","domain/Observable.ts","domain/RandomGenerator.ts","domain/Robot.ts","domain/Store.ts","domain/Game.ts","domain/Strategy.ts","ui/contexts/game.ts","ui/components/Counter/Counter.tsx","ui/components/ProbabilityCommands/SliderCommand.tsx","ui/components/ProbabilityCommands/ProbabilityCommands.tsx","ui/components/RobotsLocations/arrows.tsx","ui/components/RobotsLocations/circles.tsx","utils.ts","ui/hooks/useGameState.ts","ui/components/RobotsLocations/useRobotsAmountByLocation.ts","ui/components/RobotsLocations/RobotsLocations.tsx","ui/components/Statistics/Statistics.tsx","ui/Foobartory.tsx","index.tsx"],"names":["Location","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RealDateTime","Date","now","ActionType","MOVING","actionType","totalDuration","MINING_FOO","successfulResult","foos","location","FOO_MINE","MINING_BAR","totalDurationIn","bars","BAR_MINE","ASSEMBLING","neededressources","errorMessage","foobars","unsuccessfulResult","successPercentage","ASSEMBLING_FACTORY","BUYING_ROBOT","robots","SHOP","WAITING","ObservedRobot","Observable","callbacks","Map","information","callback","this","get","push","value","forEach","ObservedAmount","ObservableRobot","set","ROBOT_LOCATION","ROBOT_NEXT_LOCATION","ObservableStore","FOOS_AMOUNT","BARS_AMOUNT","FOOBARS_AMOUNT","ROBOTS_AMOUNT","RealRandomGenerator","percentage","Error","Math","random","min","max","values","_checkWeights","weightsSum","Array","from","reduce","a","b","chosenValue","entries","next","sum","key","weights","some","x","every","Robot","store","options","action","randomGenerator","nextLocation","actionStartTime","keepLocation","observable","previousAction","getRobotsObservable","addRobot","setNextLocation","setLocation","initialLocation","currentTime","actionTotalDuration","actionAlreadyExecutedDuration","undefined","randomBetweenTwoValues","isActionWithDuration","_endAction","_endMove","_endLocationRelatedAction","setAction","_checkLocationSpecified","getNextLocation","randomPercentageSuccess","_applyActionSuccessfulResult","_applyActionUnsuccessfulResult","_consumeRessources","actionResult","transform","setFoosAmount","getFoosAmount","setBarsAmount","getBarsAmount","setFoobarsAmount","getFoobarsAmount","_addRobots","amount","i","_checksForStartingMove","TRANSITION","_checkAvailable","_checkNotKeepingLocation","getKeepLocation","_checksForLocationRelatedAction","_consumeNeededRessources","_checkLocationForAction","_checkRessources","isAvailable","neededRessources","enoughFoos","enoughBars","enoughFoobars","enoughRobots","getRobots","length","subscribe","_canDoAction","nextLocations","robot","trigger","locations","getLocation","Store","foosAmount","barsAmount","fooBarsAmount","robotsObservable","Game","strategy","dateTime","started","startTime","getCurrentTime","requestId","nextFrame","actOnOneFrame","requestAnimationFrame","cancelAnimationFrame","id","subscribeToRobots","INITIAL_WEIGHTS","BasicStrategy","automaticMovementProbability","automaticLocationWeights","weight","probability","tick","startMoving","_handleAutomaticActions","hasJustMoved","getPreviousAction","_doAutomaticMove","_doAutomaticOtherActions","possibleLocations","delete","chosenLocation","chooseValue","exception","message","includes","startLocationRelatedAction","canAssemble","canBuyRobot","GameContext","React","createContext","Span","styled","span","Counter","game","useContext","useState","time","setTime","formatNumber","number","useEffect","interval","setInterval","getStarted","clearInterval","getStartTime","date","getMinutes","sec","getSeconds","formatDate","liStyle","css","Li","li","first","useStyles","makeStyles","root","percentageMarks","label","SliderCommand","text","defaultValue","onChange","classes","Slider","valueLabelDisplay","onChangeCommitted","aria-labelledby","marks","className","List","ul","ProbabilityCommands","getStrategy","createLocationWeightChangeHandler","_","setLocationWeight","getAutomaticMovementProbability","setAutomaticMovementProbability","getLocationWeight","SMALL_RESPONSIVE_FACTOR","MEDIUM_RESPONSIVE_FACTOR","FooArrow","size","ArrowContainer","top","left","rotate","ArrowValue","right","BarArrow","FactoryArrow","bottom","ShopArrow","children","buildRules","buildVerticalPositionRule","buildHorizontalPositionRule","positionName","position","Arrow","xmlns","height","width","viewBox","d","circle","FooCircle","Circle","positions","BarCircle","FactoryCircle","ShopCircle","MovingCircle","IncrementableMap","has","useStoreState","initialValue","observed","storeState","setStoreState","subscribeToAmount","useRobotsValue","observedType","mapInitialValue","robotsNextLocation","robotState","setRobotState","useRobotState","robotsValues","useMemo","increment","MainSquare","FooLabel","BarLabel","FactoryLabel","ShopLabel","MovingLabel","RobotsLocations","robotsAmountByLocation","useRobotsAmountByLocation","robotsAmountByNextLocation","useRobotsAmountByNextLocation","totalRobotsAmount","totalRobotsWithNextLocation","accumulator","computeCircleSize","robotsInlocation","sqrt","computeArrowSize","robotsNextlocation","pow","Label","Value","Statistics","foobarsAmount","robotsAmount","Main","main","Container","div","TitleContainer","Title","h1","Foobartory","useRef","current","start","Provider","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b83304f9.chunk.js","sourcesContent":["enum Location {\n  FOO_MINE = \"foo mine\",\n  BAR_MINE = \"bar mine\",\n  ASSEMBLING_FACTORY = \"assembling factory\",\n  SHOP = \"shop\",\n  TRANSITION = \"transition\",\n}\n\nexport default Location;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","interface DateTime {\n  getCurrentTime(): number;\n}\n\nclass FakeDateTime implements DateTime {\n  constructor(private time: number = 0) {}\n\n  advance(miliseconds: number) {\n    this.time += miliseconds;\n  }\n\n  getCurrentTime(): number {\n    return this.time;\n  }\n}\n\nclass RealDateTime implements DateTime {\n  getCurrentTime(): number {\n    return Date.now();\n  }\n}\n\nexport { FakeDateTime, RealDateTime };\nexport type { DateTime };\n","import Location from \"./locations\";\n\nenum ActionType {\n  MOVING = \"moving\",\n  MINING_FOO = \"mining foo\",\n  MINING_BAR = \"mining bar\",\n  ASSEMBLING = \"assembling\",\n  BUYING_ROBOT = \"buying robot\",\n  WAITING = \"waiting\",\n}\n\ntype Ressources = {\n  foos?: number;\n  bars?: number;\n  foobars?: number;\n  robots?: number;\n};\ninterface NeededRessources extends Ressources {\n  errorMessage: string;\n}\n\ninterface ActionBase {\n  actionType: ActionType;\n  /**\n   * If the needed ressources are not satisfied, the action can't be done.\n   */\n  neededressources?: NeededRessources;\n  /**\n   * The ressources that are earned if the action is successful.\n   */\n  successfulResult?: Ressources;\n  /**\n   * The ressources that are lost if the action is successful.\n   */\n  unsuccessfulResult?: Ressources;\n  /**\n   * The chances of success fot that action.\n   */\n  successPercentage?: number;\n  /**\n   * The only location where the action can be performed.\n   */\n  location?: Location;\n}\ninterface ActionWithDuration extends ActionBase {\n  totalDuration: number;\n}\ninterface ActionWithRandomDuration extends ActionBase {\n  /**\n   * The total duration can be between the two values.\n   */\n  totalDurationIn: readonly [number, number];\n}\n\ntype Action = ActionWithDuration | ActionWithRandomDuration;\n\nconst MOVING: ActionWithDuration = {\n  actionType: ActionType.MOVING,\n  totalDuration: 5000,\n} as const;\n\nconst MINING_FOO: ActionWithDuration = {\n  actionType: ActionType.MINING_FOO,\n  totalDuration: 1000,\n  successfulResult: {\n    foos: 1,\n  },\n  location: Location.FOO_MINE,\n} as const;\n\nconst MINING_BAR: ActionWithRandomDuration = {\n  actionType: ActionType.MINING_BAR,\n  totalDurationIn: [500, 2000],\n  successfulResult: {\n    bars: 1,\n  },\n  location: Location.BAR_MINE,\n} as const;\n\nconst ASSEMBLING: ActionWithDuration = {\n  actionType: ActionType.ASSEMBLING,\n  totalDuration: 2000,\n  neededressources: {\n    foos: 1,\n    bars: 1,\n    errorMessage: \"To create a foobar the robot needs one foo and one bar\",\n  },\n  successfulResult: {\n    foobars: 1,\n  },\n  unsuccessfulResult: {\n    bars: 1,\n  },\n  successPercentage: 60,\n  location: Location.ASSEMBLING_FACTORY,\n} as const;\n\nconst BUYING_ROBOT: ActionWithDuration = {\n  actionType: ActionType.BUYING_ROBOT,\n  totalDuration: 0,\n  neededressources: {\n    foos: 6,\n    foobars: 3,\n    errorMessage: \"To buy a new robot, the robot needs 6 foos and 3 foobars\",\n  },\n  successfulResult: {\n    robots: 1,\n  },\n  location: Location.SHOP,\n} as const;\n\nconst WAITING: ActionWithDuration = {\n  actionType: ActionType.WAITING,\n  totalDuration: 0,\n} as const;\n\nfunction isActionWithRandomDuration(\n  value: Action\n): value is ActionWithRandomDuration {\n  return (value as ActionWithRandomDuration).totalDurationIn !== undefined;\n}\n\nfunction isActionWithDuration(value: Action): value is ActionWithDuration {\n  return (value as ActionWithDuration).totalDuration !== undefined;\n}\n\nexport {\n  MOVING,\n  MINING_BAR,\n  MINING_FOO,\n  ASSEMBLING,\n  BUYING_ROBOT,\n  WAITING,\n  isActionWithRandomDuration,\n  isActionWithDuration,\n};\nexport type {\n  Action,\n  ActionWithDuration,\n  ActionWithRandomDuration,\n  Ressources,\n  NeededRessources,\n};\n","class Observable<Observed> {\n  constructor(protected callbacks: Map<Observed, Function[]> = new Map()) {}\n\n  subscribe(information: Observed, callback: Function) {\n    this.callbacks.get(information)?.push(callback);\n  }\n\n  trigger<T>(information: Observed, value: T) {\n    const callbacks = this.callbacks.get(information);\n    if (callbacks) {\n      callbacks.forEach(function callObservers(callback) {\n        callback(value);\n      });\n    }\n  }\n}\n\nenum ObservedRobot {\n  ROBOT_LOCATION,\n  ROBOT_NEXT_LOCATION,\n}\n\nclass ObservableRobot extends Observable<ObservedRobot> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedRobot.ROBOT_LOCATION, []);\n    this.callbacks.set(ObservedRobot.ROBOT_NEXT_LOCATION, []);\n  }\n}\n\nenum ObservedAmount {\n  FOOS_AMOUNT,\n  BARS_AMOUNT,\n  FOOBARS_AMOUNT,\n  ROBOTS_AMOUNT,\n}\n\nclass ObservableStore extends Observable<ObservedAmount> {\n  constructor() {\n    super();\n    this.callbacks.set(ObservedAmount.FOOS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.BARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.FOOBARS_AMOUNT, []);\n    this.callbacks.set(ObservedAmount.ROBOTS_AMOUNT, []);\n  }\n}\n\nexport {\n  Observable,\n  ObservableRobot,\n  ObservedRobot,\n  ObservableStore,\n  ObservedAmount,\n};\n","type WeightedValues<T> = Map<T, number>;\n\ninterface RandomGenerator {\n  /**\n   * Compute a boolean according to a given percentage.\n   * @param percentage the percentage of chances to be true\n   *     (value between 0 and 100).\n   */\n  randomPercentageSuccess(percentage: number): boolean;\n\n  /**\n   * Compute a value between two given values\n   */\n  randomBetweenTwoValues(min: number, max: number): number;\n\n  /**\n   * Choose randomly one of the provided values, according to\n   * the given weights for each value.\n   * If the weight is 0, the value will never be chosen, if it\n   * is a positive number, the bigger it will be compared to\n   * the weight of the other values, the more chances it will\n   * have to be chosen.\n   * @param values the chosen value.\n   */\n  chooseValue<T>(values: WeightedValues<T>): T;\n}\n\nclass RealRandomGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    if (percentage < 0 || percentage > 100) {\n      throw new Error(\n        `The given percentage has to be between 0 and 100, not ${percentage}.`\n      );\n    }\n    const random = Math.random() * 100;\n    if (random < percentage) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    const value = min + Math.random() * (max - min);\n    return value;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    this._checkWeights(values);\n    const weightsSum = Array.from(values.values()).reduce((a, b) => a + b);\n    const random = Math.random() * weightsSum;\n    let chosenValue: T = values.entries().next().value;\n    let sum = 0;\n    for (let [key, value] of values) {\n      sum += value;\n      if (random <= sum) {\n        chosenValue = key;\n        break;\n      }\n    }\n    return chosenValue;\n  }\n\n  private _checkWeights<T>(values: WeightedValues<T>) {\n    const weights = Array.from(values.values());\n    const negativeWeight = weights.some((x) => x < 0);\n    if (negativeWeight) {\n      const entries = Array.from(values.entries());\n      throw new Error(`Negative weights are not allowed. Entries: ${entries}`);\n    }\n    const onlyZeroWeights = weights.every((x) => x === 0);\n    if (onlyZeroWeights) {\n      const entries = Array.from(values.entries());\n      throw new Error(\n        `At least one of the weights has to be > 0. Entries: ${entries}`\n      );\n    }\n  }\n}\n\n/**\n * Fake generator always returning true or the maximal value,\n * used for tests.\n */\nclass SuccessGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return true;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return max;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const biggestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] > v2[1] ? v1 : v2\n    );\n    return biggestPair[0];\n  }\n}\n\n/**\n * Fake generator always returning false or the minimal value,\n * used for tests.\n */\nclass FailureGenerator implements RandomGenerator {\n  randomPercentageSuccess(percentage: number): boolean {\n    return false;\n  }\n\n  randomBetweenTwoValues(min: number, max: number): number {\n    return min;\n  }\n\n  chooseValue<T>(values: WeightedValues<T>): T {\n    const smallestPair = [...values.entries()].reduce((v1, v2) =>\n      v1[1] < v2[1] ? v1 : v2\n    );\n    return smallestPair[0];\n  }\n}\n\nexport { RealRandomGenerator, SuccessGenerator, FailureGenerator };\nexport type { RandomGenerator, WeightedValues };\n","import {\n  Action,\n  ASSEMBLING,\n  BUYING_ROBOT,\n  isActionWithDuration,\n  isActionWithRandomDuration,\n  MINING_BAR,\n  MINING_FOO,\n  MOVING,\n  NeededRessources,\n  Ressources,\n  WAITING,\n} from \"./actions\";\nimport Location from \"./locations\";\nimport { ObservableRobot, ObservedRobot } from \"./Observable\";\nimport { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Store } from \"./Store\";\n\ntype RobotOptions = {\n  randomGenerator?: RandomGenerator;\n  initialLocation?: Location;\n};\n\n/**\n * The robot is the main character. It does nothing by itself except\n * finishing the execution of the actions it was asked to start.\n * To make it finish its actions, it needs to get regularly its method\n * tick() called with the current time.\n */\nclass Robot {\n  private location: Location;\n  private action: Action;\n  private randomGenerator: RandomGenerator;\n  private nextLocation: Location | null;\n  private actionStartTime: number | null;\n  private keepLocation;\n  private observable: ObservableRobot;\n  private previousAction: Action;\n\n  constructor(private store: Store, options?: RobotOptions) {\n    this.keepLocation = false;\n    this.action = WAITING;\n    this.previousAction = WAITING;\n    this.actionStartTime = null;\n    this.observable = store.getRobotsObservable();\n    this.store.addRobot(this);\n    this.nextLocation = null;\n    this.setNextLocation(this.nextLocation);\n    this.location = Location.SHOP;\n    this.setLocation(\n      options?.initialLocation ? options.initialLocation : Location.SHOP\n    );\n    this.randomGenerator = options?.randomGenerator\n      ? options?.randomGenerator\n      : new RealRandomGenerator();\n  }\n\n  /**\n   * If the current action duration has been reached, ends the\n   * action to make the robot available again, and executes its\n   * consequences.\n   * @param currentTime the current time in miliseconds.\n   */\n  tick(currentTime: number) {\n    if (this.actionStartTime !== null) {\n      const actionAlreadyExecutedDuration = currentTime - this.actionStartTime;\n      let actionTotalDuration: number;\n      if (isActionWithRandomDuration(this.action)) {\n        actionTotalDuration = this.randomGenerator.randomBetweenTwoValues(\n          ...this.action.totalDurationIn\n        );\n      } else if (isActionWithDuration(this.action)) {\n        actionTotalDuration = this.action.totalDuration;\n      } else {\n        throw new Error(\n          `Action total duration has not been found for action ${this.action}.`\n        );\n      }\n      if (actionAlreadyExecutedDuration >= actionTotalDuration) {\n        this._endAction();\n      }\n    }\n  }\n\n  private _endAction() {\n    if (this.action === MOVING) {\n      this._endMove();\n    } else {\n      this._endLocationRelatedAction(this.action);\n    }\n    this.setAction(WAITING);\n    this.actionStartTime = null;\n  }\n\n  private _endMove() {\n    this._checkLocationSpecified();\n    this.setLocation(this.nextLocation as Location);\n    this.setNextLocation(null);\n  }\n\n  private _checkLocationSpecified() {\n    if (!this.getNextLocation()) {\n      throw new Error(\n        \"The robot can't start or end moving without next location specified.\"\n      );\n    }\n  }\n\n  private _endLocationRelatedAction(action: Action) {\n    let isActionSuccessful = action.successPercentage\n      ? this.randomGenerator.randomPercentageSuccess(action.successPercentage)\n      : true;\n    if (isActionSuccessful) {\n      this._applyActionSuccessfulResult(action);\n    } else {\n      this._applyActionUnsuccessfulResult(action);\n    }\n  }\n\n  private _applyActionSuccessfulResult(action: Action) {\n    this._consumeRessources(action?.successfulResult);\n  }\n\n  private _applyActionUnsuccessfulResult(action: Action) {\n    this._consumeRessources(action?.unsuccessfulResult);\n  }\n\n  private _consumeRessources(\n    actionResult?: Ressources,\n    transform = (value: number) => value\n  ) {\n    actionResult?.foos &&\n      this.store.setFoosAmount(\n        this.store.getFoosAmount() + transform(actionResult.foos)\n      );\n    actionResult?.bars &&\n      this.store.setBarsAmount(\n        this.store.getBarsAmount() + transform(actionResult.bars)\n      );\n    actionResult?.foobars &&\n      this.store.setFoobarsAmount(\n        this.store.getFoobarsAmount() + transform(actionResult.foobars)\n      );\n    actionResult?.robots && this._addRobots(transform(actionResult.robots));\n  }\n\n  private _addRobots(amount: number) {\n    // currently robots can only be added, a negative amount will do nothing\n    for (let i = 0; i < amount; i++) {\n      new Robot(this.store);\n    }\n  }\n\n  /**\n   * Starts moving if the robot isn't doing anything and the next location\n   * has been specified.\n   */\n  startMoving(currentTime: number) {\n    this._checksForStartingMove();\n    this.setLocation(Location.TRANSITION);\n    this.setAction(MOVING);\n    this.actionStartTime = currentTime;\n  }\n\n  private _checksForStartingMove() {\n    this._checkAvailable();\n    this._checkLocationSpecified();\n    this._checkNotKeepingLocation();\n  }\n\n  private _checkNotKeepingLocation() {\n    if (this.getKeepLocation()) {\n      throw new Error(\n        \"The robot can't start moving while it has been asked to keep its location.\"\n      );\n    }\n  }\n\n  /**\n   * Starts an action on the current location if the robot isn't doing anything.\n   */\n  startLocationRelatedAction(currentTime: number) {\n    const action = this._checksForLocationRelatedAction();\n    this._consumeNeededRessources(action);\n    this.setAction(action);\n    this.actionStartTime = currentTime;\n  }\n\n  private _checksForLocationRelatedAction(): Action {\n    this._checkAvailable();\n    const action = this._checkLocationForAction();\n    if (action.neededressources) {\n      this._checkRessources(action.neededressources);\n    }\n    return action;\n  }\n\n  private _checkAvailable() {\n    if (!this.isAvailable()) {\n      throw new Error(`The robot is not available yet`);\n    }\n  }\n\n  private _checkLocationForAction(): Action {\n    let action;\n    switch (this.location) {\n      case Location.FOO_MINE:\n        action = MINING_FOO;\n        break;\n      case Location.BAR_MINE:\n        action = MINING_BAR;\n        break;\n      case Location.ASSEMBLING_FACTORY:\n        action = ASSEMBLING;\n        break;\n      case Location.SHOP:\n        action = BUYING_ROBOT;\n        break;\n      default:\n        throw new Error(\n          `The current location (${this.location}) does not allow location related actions.`\n        );\n    }\n    return action;\n  }\n\n  private _checkRessources(neededRessources: NeededRessources) {\n    const enoughFoos = neededRessources?.foos\n      ? this.store.getFoosAmount() >= neededRessources.foos\n      : true;\n    const enoughBars = neededRessources?.bars\n      ? this.store.getBarsAmount() >= neededRessources.bars\n      : true;\n    const enoughFoobars = neededRessources?.foobars\n      ? this.store.getFoobarsAmount() >= neededRessources.foobars\n      : true;\n    const enoughRobots = neededRessources?.robots\n      ? this.store.getRobots().length >= neededRessources.robots\n      : true;\n    const enoughRessources =\n      enoughFoos && enoughBars && enoughFoobars && enoughRobots;\n    if (!enoughRessources) {\n      throw new Error(\n        `${neededRessources.errorMessage}.\n        There are only ${this.store.getFoosAmount()} foos,\n        ${this.store.getBarsAmount()} bars,\n        ${this.store.getFoobarsAmount()} foobars \n        and ${this.store.getRobots().length} robots.`\n      );\n    }\n  }\n\n  private _consumeNeededRessources(action: Action) {\n    this._consumeRessources(action?.neededressources, (value) => -value);\n  }\n\n  subscribe(information: ObservedRobot, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  canAssemble(): boolean {\n    return this._canDoAction(ASSEMBLING.neededressources);\n  }\n\n  canBuyRobot(): boolean {\n    return this._canDoAction(BUYING_ROBOT.neededressources);\n  }\n\n  private _canDoAction(neededRessources?: NeededRessources) {\n    try {\n      neededRessources && this._checkRessources(neededRessources);\n    } catch {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * State the availability of the robot. A new action can't be started\n   * without the robot being available.\n   */\n  isAvailable(): boolean {\n    return this.action === WAITING;\n  }\n\n  /**\n   * Set the next location where starting to move will lead.\n   * A movement can't be started without that location set.\n   */\n  setNextLocation(location: Location | null) {\n    this.nextLocation = location;\n    const nextLocations: (Location | null)[] = [];\n    this.store.getRobots().forEach((robot) => {\n      nextLocations.push(robot.getNextLocation());\n    });\n    this.observable.trigger(ObservedRobot.ROBOT_NEXT_LOCATION, nextLocations);\n  }\n\n  getNextLocation(): Location | null {\n    return this.nextLocation;\n  }\n\n  setLocation(location: Location) {\n    this.location = location;\n    const locations: Location[] = [];\n    this.store.getRobots().forEach((robot) => {\n      locations.push(robot.getLocation());\n    });\n    this.observable.trigger(ObservedRobot.ROBOT_LOCATION, locations);\n  }\n\n  getLocation() {\n    return this.location;\n  }\n\n  setAction(action: Action) {\n    this.previousAction = this.action;\n    this.action = action;\n  }\n\n  getPreviousAction() {\n    return this.previousAction;\n  }\n\n  setKeepLocation(keepLocation: boolean) {\n    this.keepLocation = keepLocation;\n  }\n\n  getKeepLocation() {\n    return this.keepLocation;\n  }\n}\n\nexport { Robot, Location, ObservedRobot };\n","import {\n  ObservableRobot,\n  ObservableStore,\n  ObservedAmount,\n  ObservedRobot,\n} from \"./Observable\";\nimport { Robot } from \"./Robot\";\n\nclass Store {\n  private foosAmount: number;\n  private barsAmount: number;\n  private fooBarsAmount: number;\n  private robots: Robot[];\n  private observable: ObservableStore;\n  private robotsObservable: ObservableRobot;\n\n  constructor() {\n    this.observable = new ObservableStore();\n    this.robotsObservable = new ObservableRobot();\n    this.foosAmount = 0;\n    this.barsAmount = 0;\n    this.fooBarsAmount = 0;\n    this.robots = [];\n  }\n\n  subscribe(information: ObservedAmount, callback: Function) {\n    this.observable.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.robotsObservable.subscribe(information, callback);\n  }\n\n  setFoosAmount(amount: number) {\n    this.foosAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOS_AMOUNT, this.foosAmount);\n  }\n\n  getFoosAmount() {\n    return this.foosAmount;\n  }\n\n  setBarsAmount(amount: number) {\n    this.barsAmount = amount;\n    this.observable.trigger(ObservedAmount.BARS_AMOUNT, this.barsAmount);\n  }\n\n  getBarsAmount() {\n    return this.barsAmount;\n  }\n\n  setFoobarsAmount(amount: number) {\n    this.fooBarsAmount = amount;\n    this.observable.trigger(ObservedAmount.FOOBARS_AMOUNT, this.fooBarsAmount);\n  }\n\n  getFoobarsAmount() {\n    return this.fooBarsAmount;\n  }\n\n  addRobot(robot: Robot) {\n    this.robots.push(robot);\n    this.observable.trigger(ObservedAmount.ROBOTS_AMOUNT, this.robots.length);\n  }\n\n  getRobots() {\n    return this.robots;\n  }\n\n  getRobotsObservable() {\n    return this.robotsObservable;\n  }\n}\n\nexport { Store, ObservedAmount, ObservedRobot };\n","import { DateTime, RealDateTime } from \"./DateTime\";\nimport Location from \"./locations\";\nimport { ObservedAmount, ObservedRobot } from \"./Observable\";\nimport { Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\nimport { Strategy } from \"./Strategy\";\n\nconst MAX_ROBOTS = 20;\n\ntype GameOptions = {\n  dateTime?: DateTime;\n};\nclass Game {\n  public store: Store;\n  private dateTime: DateTime;\n  private started: boolean;\n  private startTime: number | null;\n\n  constructor(private strategy: Strategy, options?: GameOptions) {\n    this.store = new Store();\n    this.dateTime = options?.dateTime ? options.dateTime : new RealDateTime();\n    new Robot(this.store);\n    new Robot(this.store);\n    this.started = false;\n    this.startTime = null;\n  }\n\n  start() {\n    this.started = true;\n    this.startTime = this.dateTime.getCurrentTime();\n    let requestId = 0;\n    const nextFrame = () => {\n      const now = this.dateTime.getCurrentTime();\n      this.strategy.actOnOneFrame(now, this.store);\n      if (this.started && this.store.getRobots().length < MAX_ROBOTS) {\n        requestId = requestAnimationFrame(nextFrame);\n      } else {\n        cancelAnimationFrame(requestId);\n        this.started = false;\n        this.startTime = null;\n      }\n    };\n    nextFrame();\n  }\n\n  stop() {\n    this.started = false;\n    this.startTime = null;\n  }\n\n  getStartTime() {\n    return this.startTime;\n  }\n\n  getStarted(): boolean {\n    return this.started;\n  }\n\n  getCurrentTime() {\n    if (this.started) {\n      return this.dateTime.getCurrentTime();\n    } else {\n      throw new Error(\"The game is not started\");\n    }\n  }\n\n  getStrategy(): Strategy {\n    return this.strategy;\n  }\n\n  setRobotNextLocation(id: number, location: Location) {\n    this.store.getRobots()[id].setNextLocation(location);\n  }\n\n  getRobotLocation(id: number): Location {\n    return this.store.getRobots()[id].getLocation();\n  }\n\n  subscribeToAmount(information: ObservedAmount, callback: Function) {\n    this.store.subscribe(information, callback);\n  }\n\n  subscribeToRobots(information: ObservedRobot, callback: Function) {\n    this.store.subscribeToRobots(information, callback);\n  }\n}\nexport { Game, MAX_ROBOTS };\n","import { MOVING, WAITING } from \"./actions\";\nimport Location from \"./locations\";\nimport { RandomGenerator, RealRandomGenerator } from \"./RandomGenerator\";\nimport { Robot } from \"./Robot\";\nimport { Store } from \"./Store\";\n\nconst INITIAL_MOVEMENT_PROBABILITY = 50;\nconst INITIAL_WEIGHTS = {\n  fooMine: 50,\n  barMine: 50,\n  assemblingFactory: 50,\n  shop: 50,\n} as const;\n\ninterface Strategy {\n  actOnOneFrame(currentTime: number, store: Store): void;\n}\n\ntype BasicStrategyOptions = {\n  randomGenerator?: RandomGenerator;\n};\n\n/**\n * Implements a basic strategy:\n * With a manual part taking priority:\n * - does not move robots that have been manually told to keep location.\n * - moves robots to the indicated manual location if there is one.\n * And an automatic part:\n * - chooses randomly to make an available robot move to a random\n *   location, or instead do an action if possible.\n * - the random aspect of moving or not, and where to move can be\n *   influenced manually.\n */\nclass BasicStrategy implements Strategy {\n  private randomGenerator: RandomGenerator;\n  private automaticMovementProbability: number;\n  private automaticLocationWeights: Map<Location, number>;\n\n  constructor(options?: BasicStrategyOptions) {\n    this.randomGenerator = options?.randomGenerator\n      ? options.randomGenerator\n      : new RealRandomGenerator();\n    this.automaticMovementProbability = INITIAL_MOVEMENT_PROBABILITY;\n    this.automaticLocationWeights = new Map([\n      [Location.FOO_MINE, INITIAL_WEIGHTS.fooMine],\n      [Location.BAR_MINE, INITIAL_WEIGHTS.barMine],\n      [Location.ASSEMBLING_FACTORY, INITIAL_WEIGHTS.assemblingFactory],\n      [Location.SHOP, INITIAL_WEIGHTS.shop],\n    ]);\n  }\n\n  /**\n   * This influences the probability to choose automatically one\n   * location instead of another.\n   * @param location the location to influence.\n   * @param weight the heigher the value relatively to others, the\n   *   more chances to go there.\n   */\n  setLocationWeight(location: Location, weight: number) {\n    if (weight < 0) {\n      throw new Error(\n        `The assigned weight ${weight} has to be greater than 0.`\n      );\n    }\n    this.automaticLocationWeights.set(location, weight);\n  }\n\n  getLocationWeight(location: Location) {\n    return this.automaticLocationWeights.get(location);\n  }\n\n  /**\n   * The percentage of chances to get an automatic move each time.\n   */\n  setAutomaticMovementProbability(probability: number) {\n    this.automaticMovementProbability = probability;\n  }\n\n  getAutomaticMovementProbability() {\n    return this.automaticMovementProbability;\n  }\n\n  /**\n   * Do some action on the content of the store, including robots.\n   * This function is called by the game several times per second.\n   * @param currentTime the time where the function is called.\n   */\n  actOnOneFrame(currentTime: number, store: Store) {\n    store.getRobots().forEach((robot) => {\n      robot.tick(currentTime);\n      if (robot.isAvailable()) {\n        const shouldDoManualMove =\n          robot.getNextLocation() && !robot.getKeepLocation();\n        if (shouldDoManualMove) {\n          robot.startMoving(currentTime);\n        } else {\n          this._handleAutomaticActions(robot, currentTime);\n        }\n      }\n    });\n  }\n\n  private _handleAutomaticActions(robot: Robot, currentTime: number) {\n    const hasJustMoved = robot.getPreviousAction() === MOVING;\n    const shouldAutomaticallyMove =\n      this.randomGenerator.randomPercentageSuccess(\n        this.automaticMovementProbability\n      ) &&\n      !robot.getKeepLocation() &&\n      !hasJustMoved;\n    if (shouldAutomaticallyMove) {\n      this._doAutomaticMove(robot, currentTime);\n    } else {\n      this._doAutomaticOtherActions(robot, currentTime);\n    }\n  }\n\n  private _doAutomaticMove(robot: Robot, currentTime: number) {\n    const possibleLocations = new Map(this.automaticLocationWeights);\n    possibleLocations.delete(robot.getLocation());\n    try {\n      const chosenLocation =\n        this.randomGenerator.chooseValue(possibleLocations);\n      robot.setNextLocation(chosenLocation);\n      robot.startMoving(currentTime);\n    } catch (exception) {\n      if (\n        exception.message.includes(\"At least one of the weights has to be > 0\")\n      ) {\n        // in case of wrong weights (eg. (0, 0, 0)), we just don't move\n      } else {\n        throw exception;\n      }\n    }\n  }\n\n  private _doAutomaticOtherActions(robot: Robot, currentTime: number) {\n    switch (robot.getLocation()) {\n      case Location.FOO_MINE:\n      case Location.BAR_MINE:\n        robot.startLocationRelatedAction(currentTime);\n        break;\n      case Location.ASSEMBLING_FACTORY:\n        if (robot.canAssemble()) {\n          robot.startLocationRelatedAction(currentTime);\n        } else {\n          robot.setAction(WAITING);\n          robot.setLocation(robot.getLocation());\n        }\n        break;\n      case Location.SHOP:\n        if (robot.canBuyRobot()) {\n          robot.startLocationRelatedAction(currentTime);\n        } else {\n          robot.setAction(WAITING);\n          robot.setLocation(robot.getLocation());\n        }\n        break;\n      default:\n        throw new Error(\n          `An action has been requested while the robot was the wrong location (${robot.getLocation()}).`\n        );\n    }\n  }\n}\n\nexport { BasicStrategy, INITIAL_MOVEMENT_PROBABILITY, INITIAL_WEIGHTS };\nexport type { Strategy };\n","import React from \"react\";\nimport { BasicStrategy, Game } from \"../../domain\";\n\nconst GameContext = React.createContext<Game>(new Game(new BasicStrategy()));\n\nexport default GameContext;\n","import styled from \"@emotion/styled\";\nimport { useContext, useEffect, useState } from \"react\";\nimport GameContext from \"../../contexts/game\";\n\nconst Span = styled.span`\n  font-size: 1.6rem;\n  padding: 0.5rem 0;\n\n  @media (min-width: 600px) {\n    font-size: 1.7rem;\n  }\n  @media (min-width: 950px) {\n    font-size: 1.8rem;\n  }\n`;\n\n/**\n * Count the current time according to the game internal date time.\n * The counter freezes when the game is finished.\n * This value is updated every 0.1 seconds, which is enough to show\n * animated seconds.\n */\nfunction Counter() {\n  const game = useContext(GameContext);\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (game.getStarted()) {\n        try {\n          setTime(game.getCurrentTime());\n        } catch {\n          clearInterval(interval);\n        }\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [game]);\n\n  function formatDate(time: number) {\n    const startTime = game.getStartTime();\n    if (startTime) {\n      const date = new Date(time - startTime);\n      const min = formatNumber(date.getMinutes());\n      const sec = formatNumber(date.getSeconds());\n      return `${min}:${sec}`;\n    } else {\n      return \"00:00\";\n    }\n  }\n  function formatNumber(number: number) {\n    return number < 10 ? \"0\" + number : \"\" + number;\n  }\n\n  return <Span>{formatDate(time)}</Span>;\n}\n\nexport default Counter;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst liStyle = css`\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0;\n`;\n\ntype LiProps = {\n  first?: boolean;\n};\n\nconst Li = styled.li<LiProps>`\n  ${liStyle}\n  ${({ first }) =>\n    first\n      ? `margin-bottom: 2rem;\n        @media (min-width: 950px) {\n          margin-bottom: 0;\n          grid-column: span 2;\n          width: 60%;\n          justify-self: center;\n        }`\n      : \"\"}\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    '& .MuiSlider-markLabel[data-index=\"0\"]': {\n      transform: \"translateX(0%)\",\n    },\n    '& .MuiSlider-markLabel[data-index=\"1\"]': {\n      transform: \"translateX(-100%)\",\n    },\n  },\n});\n\nconst percentageMarks = [\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 100,\n    label: \"100%\",\n  },\n];\n\ntype SliderCommandProps = {\n  id: string;\n  text: string;\n  defaultValue: number | undefined;\n  onChange: (event: object, value: number | number[]) => void;\n  first?: boolean;\n};\n\nfunction SliderCommand({\n  id,\n  text,\n  defaultValue,\n  onChange,\n  first,\n}: SliderCommandProps) {\n  const classes = useStyles();\n  return (\n    <Li first={first}>\n      <label id={id}>{text}</label>\n      <Slider\n        defaultValue={defaultValue}\n        valueLabelDisplay=\"auto\"\n        onChangeCommitted={onChange}\n        aria-labelledby={id}\n        marks={first && percentageMarks}\n        className={classes.root}\n      />\n    </Li>\n  );\n}\n\nexport default SliderCommand;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { BasicStrategy, Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport SliderCommand from \"./SliderCommand\";\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  padding-top: 2rem;\n  border-top: solid 1px #ddd;\n  display: grid;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n    border: none;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1.3fr 1fr 1fr;\n    column-gap: 5%;\n  }\n`;\n\n/**\n * Provide slider commands to control the game automatic mode\n * by influencing the random actions.\n */\nfunction ProbabilityCommands() {\n  const game = useContext(GameContext);\n  const strategy = game.getStrategy() as BasicStrategy;\n  function handleMovementProbabilityChange(\n    _: object,\n    value: number | number[]\n  ) {\n    strategy.setAutomaticMovementProbability(value as number);\n  }\n  function createLocationWeightChangeHandler(location: Location) {\n    return function handleLocationWeightChange(\n      _: object,\n      value: number | number[]\n    ) {\n      strategy.setLocationWeight(location, value as number);\n    };\n  }\n  return (\n    <List>\n      <SliderCommand\n        id=\"movement-probability\"\n        text=\"Probability to move\"\n        defaultValue={strategy.getAutomaticMovementProbability()}\n        onChange={handleMovementProbabilityChange}\n        first={true}\n      />\n      <SliderCommand\n        id=\"foo-mine-weight\"\n        text=\"Foo mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.FOO_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.FOO_MINE)}\n      />\n      <SliderCommand\n        id=\"bar-mine-weight\"\n        text=\"Bar mine weight\"\n        defaultValue={strategy.getLocationWeight(Location.BAR_MINE)}\n        onChange={createLocationWeightChangeHandler(Location.BAR_MINE)}\n      />\n      <SliderCommand\n        id=\"assembling-factory-weight\"\n        text=\"Assembling factory weight\"\n        defaultValue={strategy.getLocationWeight(Location.ASSEMBLING_FACTORY)}\n        onChange={createLocationWeightChangeHandler(\n          Location.ASSEMBLING_FACTORY\n        )}\n      />\n      <SliderCommand\n        id=\"shop-weight\"\n        text=\"Shop weight\"\n        defaultValue={strategy.getLocationWeight(Location.SHOP)}\n        onChange={createLocationWeightChangeHandler(Location.SHOP)}\n      />\n    </List>\n  );\n}\n\nexport default ProbabilityCommands;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\n\n// these factors mulpitply the arrows' size for smaller viewports\nconst SMALL_RESPONSIVE_FACTOR = 1.6;\nconst MEDIUM_RESPONSIVE_FACTOR = 1.3;\n\ntype ArrowContainerProps = {\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n  size: number;\n  rotate: number;\n  children: React.ReactNode;\n};\n\ntype SpecificArrowProps = {\n  size: number;\n  value: number;\n};\n\nfunction FooArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer top={5} left={30} rotate={170} size={size}>\n      <ArrowValue value={value} top={1.5} right={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction BarArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer top={5} right={30} rotate={300} size={size}>\n      <ArrowValue value={value} top={1.5} left={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction FactoryArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer bottom={5} left={30} rotate={120} size={size}>\n      <ArrowValue value={value} bottom={1.5} right={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction ShopArrow({ size, value }: SpecificArrowProps) {\n  return (\n    <ArrowContainer bottom={5} right={30} rotate={350} size={size}>\n      <ArrowValue value={value} bottom={1.5} left={1} size={size} />\n    </ArrowContainer>\n  );\n}\n\nfunction ArrowContainer({\n  top,\n  bottom,\n  left,\n  right,\n  size,\n  rotate,\n  children,\n}: ArrowContainerProps) {\n  function buildRules(size: number) {\n    return `${top ? buildVerticalPositionRule(\"top\", top, size) : \"\"}\n        ${bottom ? buildVerticalPositionRule(\"bottom\", bottom, size) : \"\"}\n        ${left ? buildHorizontalPositionRule(\"left\", left, size) : \"\"}\n        ${right ? buildHorizontalPositionRule(\"right\", right, size) : \"\"}\n        `;\n  }\n  function buildVerticalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: calc(${position}rem - calc(${size}rem / 2));`;\n  }\n  function buildHorizontalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: calc(${position}% - calc(${size}rem / 2));`;\n  }\n  return (\n    <div\n      css={css`\n        transition: all 0.3s ease;\n        transition-property: top, bottom, left, right;\n        position: absolute;\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      <Arrow rotate={rotate} size={size} />\n      {children}\n    </div>\n  );\n}\n\ntype ArrowProps = {\n  rotate: number;\n  size: number;\n};\n\nfunction Arrow({ rotate, size }: ArrowProps) {\n  return (\n    // SVG Arrow by Daria Szymonowicz from the Noun Project\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      css={css`\n        transition: all 0.3s ease;\n        transition-property: width, height;\n        transform: rotate(${rotate}deg);\n        width: ${size / SMALL_RESPONSIVE_FACTOR}rem;\n        height: ${size / SMALL_RESPONSIVE_FACTOR}rem;\n\n        @media (min-width: 450px) {\n          width: ${size / MEDIUM_RESPONSIVE_FACTOR}rem;\n          height: ${size / MEDIUM_RESPONSIVE_FACTOR}rem;\n        }\n        @media (min-width: 600px) {\n          width: ${size}rem;\n          height: ${size}rem;\n        }\n      `}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox=\"0 0 100 100\"\n    >\n      <g>\n        <path d=\"M84.68,75.29l-13.78-31L64,53.77c-2.89-1.86-5.92-3.51-8.87-5.28L42.23,40.37C33.55,35,24.81,29.77,15.93,24.71l-.61.83c7.56,6.88,15.26,13.56,23,20.17l11.72,9.8c2.6,2.25,5.11,4.63,7.77,6.8L51,71.75Z\" />\n      </g>\n    </svg>\n  );\n}\n\ntype ArrowValueProps = {\n  value: number;\n  size: number;\n  top?: number;\n  bottom?: number;\n  left?: number;\n  right?: number;\n};\n\nfunction ArrowValue({\n  value,\n  size,\n  top,\n  bottom,\n  left,\n  right,\n}: ArrowValueProps) {\n  const fontSizeFactor = 4.4;\n  const horizontalPositionFactor = 5;\n  const verticalPositionFactor = 7;\n  function buildRules(size: number) {\n    return `${top ? buildVerticalPositionRule(\"top\", top, size) : \"\"}\n        ${bottom ? buildVerticalPositionRule(\"bottom\", bottom, size) : \"\"}\n        ${left ? buildHorizontalPositionRule(\"left\", left, size) : \"\"}\n        ${right ? buildHorizontalPositionRule(\"right\", right, size) : \"\"}\n        font-size: ${size / fontSizeFactor}rem;\n        `;\n  }\n  function buildVerticalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: ${(position * size) / verticalPositionFactor}rem;`;\n  }\n  function buildHorizontalPositionRule(\n    positionName: string,\n    position: number,\n    size: number\n  ) {\n    return `${positionName}: ${\n      (position * size) / horizontalPositionFactor\n    }rem;`;\n  }\n  return (\n    <span\n      css={css`\n        position: absolute;\n        transition: all 0.3s ease;\n        transition-property: font-size, top, bottom, left, right;\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {value}\n    </span>\n  );\n}\n\nexport { FooArrow, BarArrow, FactoryArrow, ShopArrow };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\n\n// these factors mulpitply the circles' size for smaller viewports\nconst SMALL_RESPONSIVE_FACTOR = 1.6;\nconst MEDIUM_RESPONSIVE_FACTOR = 1.3;\nconst FONT_FACTOR = 1.5;\n\ntype CircleProps = {\n  size: number;\n  positions: string;\n  children: React.ReactNode;\n};\n\ntype SpecificCircleProps = {\n  size: number;\n  children: React.ReactNode;\n};\n\nconst circle = css`\n  position: absolute;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  transition-property: width, height, top, left, font-size;\n  background-color: #333;\n  color: #eee;\n  display: grid;\n  place-content: center;\n`;\n\nfunction FooCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"top: 0; left: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction BarCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"top: 0; right: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction FactoryCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"bottom: 0; left: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction ShopCircle({ size, children }: SpecificCircleProps) {\n  return (\n    <Circle size={size} positions=\"bottom: 0; right: 0;\">\n      {children}\n    </Circle>\n  );\n}\n\nfunction Circle({ size, positions, children }: CircleProps) {\n  function buildRules(size: number) {\n    return `width: ${size}rem;\n        height: ${size}rem;\n        font-size: ${size / FONT_FACTOR}rem;\n        `;\n  }\n  return (\n    <div\n      css={css`\n        ${circle}\n        ${positions}\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction MovingCircle({ size, children }: SpecificCircleProps) {\n  function buildRules(size: number) {\n    return `top: calc(50% - calc(${size}rem / 2));\n        left: calc(50% - calc(${size}rem / 2));\n        width: ${size}rem;\n        height: ${size}rem;\n        font-size: ${size / FONT_FACTOR}rem;\n        `;\n  }\n  return (\n    <div\n      css={css`\n        ${circle}\n        ${buildRules(size / SMALL_RESPONSIVE_FACTOR)}\n\n        @media (min-width: 450px) {\n          ${buildRules(size / MEDIUM_RESPONSIVE_FACTOR)}\n        }\n        @media (min-width: 600px) {\n          ${buildRules(size)}\n        }\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport { FooCircle, BarCircle, FactoryCircle, ShopCircle, MovingCircle };\n","class IncrementableMap<T> extends Map<T, number> {\n  increment(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) + 1);\n  }\n  decrement(key: T) {\n    this.has(key) && this.set(key, (this.get(key) as number) - 1);\n  }\n}\n\nexport { IncrementableMap };\n","import { useEffect, useState } from \"react\";\nimport { Game, ObservedAmount, ObservedRobot } from \"../../domain\";\n\n/**\n * These hooks create observer states, subscribing to the game\n * observable API.\n */\n\ninterface UseGameStateProps<T> {\n  game: Game;\n  initialValue: T;\n}\n\ninterface UseStoreStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedAmount;\n}\n\ninterface UseRobotStateProps<T> extends UseGameStateProps<T> {\n  observed: ObservedRobot;\n}\n\nfunction useStoreState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseStoreStateProps<T>) {\n  const [storeState, setStoreState] = useState<T>(initialValue);\n  useEffect(\n    function observeStore() {\n      game.subscribeToAmount(observed, setStoreState);\n    },\n    [game, observed]\n  );\n  return storeState;\n}\n\nfunction useRobotState<T>({\n  game,\n  initialValue,\n  observed,\n}: UseRobotStateProps<T>) {\n  const [robotState, setRobotState] = useState<T>(initialValue);\n  useEffect(\n    function observeRobot() {\n      game.subscribeToRobots(observed, setRobotState);\n    },\n    [game, observed]\n  );\n  return robotState;\n}\n\nexport { useStoreState, useRobotState };\n","import { useMemo } from \"react\";\nimport { Game, Location, ObservedRobot } from \"../../../domain\";\nimport { IncrementableMap } from \"../../../utils\";\nimport { useRobotState } from \"../../hooks/useGameState\";\n\n/**\n * Build and return a Map associating locations with the number\n * of robots on that location.\n */\nfunction useRobotsAmountByLocation(game: Game) {\n  const { robotsValues } = useRobotsValue<Location>({\n    game,\n    observedType: ObservedRobot.ROBOT_LOCATION,\n    mapInitialValue: [\n      [Location.FOO_MINE, 0],\n      [Location.BAR_MINE, 0],\n      [Location.ASSEMBLING_FACTORY, 0],\n      [Location.SHOP, 0],\n      [Location.TRANSITION, 0],\n    ],\n  });\n  return { robotsAmountByLocation: robotsValues };\n}\n\n/**\n * Build and return a Map associating locations with the number\n * of robots that are currently moving to that location.\n */\nfunction useRobotsAmountByNextLocation(game: Game) {\n  const { robotsValues } = useRobotsValue<Location | null>({\n    game,\n    observedType: ObservedRobot.ROBOT_NEXT_LOCATION,\n    mapInitialValue: [\n      [Location.FOO_MINE, 0],\n      [Location.BAR_MINE, 0],\n      [Location.ASSEMBLING_FACTORY, 0],\n      [Location.SHOP, 0],\n    ],\n  });\n  return { robotsAmountByNextLocation: robotsValues };\n}\n\ntype RobotsValueProps<T> = {\n  game: Game;\n  observedType: ObservedRobot;\n  mapInitialValue: [T, any][];\n};\n\nfunction useRobotsValue<T>({\n  game,\n  observedType,\n  mapInitialValue,\n}: RobotsValueProps<T>) {\n  const robotsNextLocation = useRobotState<T[]>({\n    game,\n    initialValue: [],\n    observed: observedType,\n  });\n\n  const robotsValues = useMemo(() => {\n    let locations = new IncrementableMap<T>(mapInitialValue);\n    robotsNextLocation.forEach((location) => {\n      locations.increment(location);\n    });\n    return locations;\n  }, [robotsNextLocation, mapInitialValue]);\n\n  return { robotsValues };\n}\n\nexport { useRobotsAmountByLocation, useRobotsAmountByNextLocation };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { Location } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { BarArrow, FactoryArrow, FooArrow, ShopArrow } from \"./arrows\";\nimport {\n  BarCircle,\n  FactoryCircle,\n  FooCircle,\n  MovingCircle,\n  ShopCircle,\n} from \"./circles\";\nimport {\n  useRobotsAmountByLocation,\n  useRobotsAmountByNextLocation,\n} from \"./useRobotsAmountByLocation\";\n\nconst MainSquare = styled.ul`\n  height: 15rem;\n  position: relative;\n  margin: 3rem 0 3.7rem 0;\n  list-style-type: none;\n  padding: 0;\n\n  @media (min-width: 950px) {\n    flex: 1.35;\n    height: 17rem;\n  }\n`;\n\nconst label = css`\n  position: absolute;\n  font-weight: bold;\n  padding: 0.2rem 0;\n  font-size: 1rem;\n\n  @media (min-width: 400px) {\n    font-size: 1.05rem;\n  }\n  @media (min-width: 600px) {\n    font-size: 1.13rem;\n  }\n`;\nconst FooLabel = styled.span`\n  ${label}\n  top: -2.1rem;\n  left: 0;\n`;\nconst BarLabel = styled.span`\n  ${label}\n  top: -2.1rem;\n  right: 0;\n`;\nconst FactoryLabel = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  left: 0;\n`;\nconst ShopLabel = styled.span`\n  ${label}\n  bottom: -2.2rem;\n  right: 0;\n`;\nconst MovingLabel = styled.span`\n  ${label}\n  transition: all 0.3s ease;\n  transition-property: top, left;\n  color: black;\n  bottom: -2rem;\n  left: calc(50% - 2rem);\n`;\n\n/**\n * Display a high level graphical view of robots current and next locations.\n */\nfunction RobotsLocations() {\n  const game = useContext(GameContext);\n  const { robotsAmountByLocation } = useRobotsAmountByLocation(game);\n  const { robotsAmountByNextLocation } = useRobotsAmountByNextLocation(game);\n  const totalRobotsAmount = game.store.getRobots().length;\n  const totalRobotsWithNextLocation = game.store\n    .getRobots()\n    .reduce(function amountWithNextLocation(accumulator, robot) {\n      return robot.getNextLocation() ? accumulator + 1 : accumulator;\n    }, 0);\n  const circleSizeFactor = 7;\n  const arrowSizeFactor = 8;\n  function computeCircleSize(location: Location) {\n    const robotsInlocation = robotsAmountByLocation.get(location);\n    /* With the square root division the circle sizes increase in a\n       softer way: a circle with 1 robot will be 3.9 times smaller\n       than a circle with 15 robots, instead of 15 times smaller. */\n    return totalRobotsAmount && robotsInlocation\n      ? (Math.sqrt(robotsInlocation) / Math.sqrt(totalRobotsAmount)) *\n          circleSizeFactor\n      : 0;\n  }\n  function computeArrowSize(location: Location) {\n    const robotsNextlocation = robotsAmountByNextLocation.get(location);\n    /* For arrow sizes we use the 3rd root instead of the square root\n       to get an even softer change */\n    return totalRobotsWithNextLocation && robotsNextlocation\n      ? (Math.pow(robotsNextlocation, 1 / 3) /\n          Math.pow(totalRobotsWithNextLocation, 1 / 3)) *\n          arrowSizeFactor\n      : 0;\n  }\n  return (\n    <MainSquare>\n      <li>\n        <FooLabel>Foo mine</FooLabel>\n        <FooCircle size={computeCircleSize(Location.FOO_MINE)}>\n          {robotsAmountByLocation.get(Location.FOO_MINE)}\n        </FooCircle>\n        <FooArrow\n          size={computeArrowSize(Location.FOO_MINE)}\n          value={robotsAmountByNextLocation.get(Location.FOO_MINE) as number}\n        />\n      </li>\n      <li>\n        <BarLabel>Bar mine</BarLabel>\n        <BarCircle size={computeCircleSize(Location.BAR_MINE)}>\n          {robotsAmountByLocation.get(Location.BAR_MINE)}\n        </BarCircle>\n        <BarArrow\n          size={computeArrowSize(Location.BAR_MINE)}\n          value={robotsAmountByNextLocation.get(Location.BAR_MINE) as number}\n        />\n      </li>\n      <li>\n        <FactoryLabel>Assembling factory</FactoryLabel>\n        <FactoryCircle size={computeCircleSize(Location.ASSEMBLING_FACTORY)}>\n          {robotsAmountByLocation.get(Location.ASSEMBLING_FACTORY)}\n        </FactoryCircle>\n        <FactoryArrow\n          size={computeArrowSize(Location.ASSEMBLING_FACTORY)}\n          value={\n            robotsAmountByNextLocation.get(\n              Location.ASSEMBLING_FACTORY\n            ) as number\n          }\n        />\n      </li>\n      <li>\n        <ShopLabel>Shop</ShopLabel>\n        <ShopCircle size={computeCircleSize(Location.SHOP)}>\n          {robotsAmountByLocation.get(Location.SHOP)}\n        </ShopCircle>\n        <ShopArrow\n          size={computeArrowSize(Location.SHOP)}\n          value={robotsAmountByNextLocation.get(Location.SHOP) as number}\n        />\n      </li>\n      <li>\n        <MovingCircle size={computeCircleSize(Location.TRANSITION)}>\n          <MovingLabel>Moving</MovingLabel>\n          {robotsAmountByLocation.get(Location.TRANSITION)}\n        </MovingCircle>\n      </li>\n    </MainSquare>\n  );\n}\n\nexport default RobotsLocations;\n","import styled from \"@emotion/styled\";\nimport { useContext } from \"react\";\nimport { MAX_ROBOTS, ObservedAmount } from \"../../../domain\";\nimport GameContext from \"../../contexts/game\";\nimport { useStoreState } from \"../../hooks\";\n\nconst List = styled.ul`\n  display: flex;\n  list-style-type: none;\n  padding: 0;\n  justify-content: space-around;\n  background-color: #eee;\n  border-radius: 0.3rem;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);\n  padding: 0.3rem 0;\n\n  @media (min-width: 950px) {\n    flex: 1;\n    margin-right: 7%;\n    flex-wrap: wrap;\n    border-radius: 0.4rem;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.15);\n  }\n  @media (min-width: 1200px) {\n    margin-right: 6%;\n  }\n`;\nconst Li = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (min-width: 950px) {\n    flex-basis: 50%;\n    justify-content: center;\n  }\n`;\n\nconst Label = styled.span`\n  font-weight: bold;\n  padding: 0.2rem 0.4rem;\n\n  @media (min-width: 950px) {\n    margin-bottom: 0.3rem;\n  }\n`;\nconst Value = styled.span`\n  padding: 0.2rem 0.4rem;\n  font-size: 1.1rem;\n\n  @media (min-width: 500px) {\n    font-size: 1.4rem;\n  }\n  @media (min-width: 950px) {\n    padding-top: 0.3rem;\n    font-size: 1.7rem;\n  }\n`;\n\n/**\n * Display statistics on what is available in the game store.\n */\nfunction Statistics() {\n  const game = useContext(GameContext);\n  const foosAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoosAmount(),\n    observed: ObservedAmount.FOOS_AMOUNT,\n  });\n  const barsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getBarsAmount(),\n    observed: ObservedAmount.BARS_AMOUNT,\n  });\n  const foobarsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getFoobarsAmount(),\n    observed: ObservedAmount.FOOBARS_AMOUNT,\n  });\n  const robotsAmount = useStoreState<number>({\n    game,\n    initialValue: game.store.getRobots().length,\n    observed: ObservedAmount.ROBOTS_AMOUNT,\n  });\n  return (\n    <List>\n      <Li>\n        <Label>Foos</Label>\n        <Value>{foosAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Bars</Label>\n        <Value>{barsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Foobars</Label>\n        <Value>{foobarsAmount}</Value>\n      </Li>\n      <Li>\n        <Label>Robots</Label>\n        <Value>\n          {robotsAmount} / {MAX_ROBOTS}\n        </Value>\n      </Li>\n    </List>\n  );\n}\n\nexport default Statistics;\n","import styled from \"@emotion/styled\";\nimport { useEffect, useRef } from \"react\";\nimport { BasicStrategy, Game } from \"../domain\";\nimport { Counter } from \"./components/Counter\";\nimport { ProbabilityCommands } from \"./components/ProbabilityCommands\";\nimport { RobotsLocations } from \"./components/RobotsLocations\";\nimport { Statistics } from \"./components/Statistics\";\nimport GameContext from \"./contexts/game\";\nimport \"./global.css\";\n\nconst Main = styled.main`\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n\n  @media (min-width: 450px) {\n    padding: 1rem 2rem;\n  }\n  @media (min-width: 600px) {\n    padding: 1rem 8%;\n  }\n  @media (min-width: 950px) {\n    padding: 1rem 4rem;\n  }\n`;\n\nconst Container = styled.div`\n  flex: 1;\n  max-width: 1200px;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 950px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-content: flex-start;\n  }\n`;\n\nconst TitleContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 350px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n  padding: 0.5rem 0;\n\n  @media (min-width: 950px) {\n    flex-basis: 100%;\n  }\n`;\n\n/**\n * The main component holding the whole app.\n */\nfunction Foobartory() {\n  const game = useRef(new Game(new BasicStrategy()));\n  useEffect(() => {\n    game.current.start();\n  }, []);\n  return (\n    <GameContext.Provider value={game.current}>\n      <Main role=\"main\">\n        <Container>\n          <TitleContainer>\n            <Title>Foobartory</Title>\n            <Counter />\n          </TitleContainer>\n          <Statistics />\n          <RobotsLocations />\n          <ProbabilityCommands />\n        </Container>\n      </Main>\n    </GameContext.Provider>\n  );\n}\n\nexport default Foobartory;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Foobartory from \"./ui/Foobartory\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Foobartory />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}